{"_id":"barista","_rev":"37-47ec67d12b896ea82bb9bf8de5b6b73d","name":"barista","description":"URL router & generator, similar to Rails / merb","dist-tags":{"latest":"0.1.1"},"versions":{"0.0.1":{"name":"barista","description":"URL router / generator","version":"0.0.1","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista.git"},"main":"./index.js","engines":{"node":">= 0.3.0"},"_id":"barista@0.0.1","_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"5ce592c410340445b4cbbdea946acd0d175e50cf","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.2","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista.git"},"main":"./index.js","engines":{"node":">= 0.3.0"},"_id":"barista@0.0.2","_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"51be860248978b29efda24dd5f91c81f77d01cbf","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.3","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista.git"},"main":"./index.js","engines":{"node":">= 0.3.0"},"_id":"barista@0.0.3","_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.4","_defaultsLoaded":true,"dist":{"shasum":"f4a96343f244596c6b01c41abf1ef471987517a6","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.3.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.4":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.4","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista.git"},"main":"./index.js","engines":{"node":">= 0.3.0"},"_npmJsonOpts":{"file":"/Users/kieran/.npm/barista/0.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"barista@0.0.4","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.26","_nodeVersion":"v0.5.4","_defaultsLoaded":true,"dist":{"shasum":"9d040664f4f27bf83b82c8552ee0c25b3c0afd57","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.4.tgz"},"scripts":{},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.5":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.5","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista.git"},"main":"./index.js","engines":{"node":">= 0.3.0"},"_npmUser":{"name":"kieran","email":"kieran@kieran.ca"},"_id":"barista@0.0.5","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"b5a69ebbee66ea32b369e541ead3d05a721f2e87","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.5.tgz"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.match( '/*path', 'GET' )\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours' }\n\n\nrouter.match( '/*path(.:format)', 'GET' )\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.","maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.6":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.6","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista"},"main":"./index.js","engines":{"node":">= 0.3.0"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.","_id":"barista@0.0.6","dist":{"shasum":"065aa0819ce7ed4f9068effea04268df7dec43a9","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.6.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.7":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.7","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista"},"main":"./index.js","engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.","_id":"barista@0.0.7","dist":{"shasum":"83667d99a3fd9e736dde1ea63cf516de1a196324","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.7.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.8":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.8","author":{"name":"Kieran Huggins","email":"kieran@kieran.ca"},"repository":{"type":"git","url":"git://github.com/kieran/barista"},"main":"./index.js","engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.","_id":"barista@0.0.8","dist":{"shasum":"beca04993b0f58462b541b8a640d7ac8bfcfe945","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.8.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.9":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.9","homepage":"http://kieran.github.io/barista/","bugs":{"url":"https://github.com/kieran/barista/issues"},"author":{"name":"Kieran Huggins","email":"kieran@kieran.ca","url":"http://kieran.ca"},"repository":{"type":"git","url":"https://github.com/kieran/barista.git"},"main":"./index.js","scripts":{"prepublish":"./node_modules/.bin/coffee -c ./lib/","test":"./node_modules/.bin/mocha --reporter list --growl --compilers coffee:coffee-script tests/mocha.coffee","autotest":"cd lib; ../node_modules/.bin/mocha -w --reporter list --growl --compilers coffee:coffee-script ../tests/mocha.coffee"},"engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"devDependencies":{"coffee-script":"*","mocha":"*"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n\nrouter.options( '/products' )\n      .to( 'products.options' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nRemoving Routes\n------------------------\n\nIn some cases, you will need to remove routes on a running router.  The `router.remove( name )` method will work for this, but requires\nuse of the otherwise unused `route.name( name )` method.\n\n### Adding a name (currently only used with this functionality)\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n      .name('products_show')\n```\n\n### Removing a named route\n\n```javascript\n\nrouter.remove('products_show')\n\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.\n","_id":"barista@0.0.9","dist":{"shasum":"52af5c246d718feb9b4ad1f509fd7044e690f15c","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.9.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.0.10":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.0.10","homepage":"http://kieran.github.io/barista/","bugs":{"url":"https://github.com/kieran/barista/issues"},"author":{"name":"Kieran Huggins","email":"kieran@kieran.ca","url":"http://kieran.ca"},"main":"./index.js","scripts":{"prepublish":"./node_modules/.bin/coffee -c ./lib/","test":"./node_modules/.bin/mocha --reporter list --growl --compilers coffee:coffee-script tests/mocha.coffee","autotest":"cd lib; ../node_modules/.bin/mocha -w --reporter list --growl --compilers coffee:coffee-script ../tests/mocha.coffee"},"engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"devDependencies":{"coffee-script":"*","mocha":"*"},"repository":{"type":"git","url":"https://github.com/kieran/barista.git"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n\nrouter.options( '/products' )\n      .to( 'products.options' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nRemoving Routes\n------------------------\n\nIn some cases, you will need to remove routes on a running router.  The `router.remove( name )` method will work for this, but requires\nuse of the otherwise unused `route.name( name )` method.\n\n### Adding a name (currently only used with this functionality)\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n      .name('products_show')\n```\n\n### Removing a named route\n\n```javascript\n\nrouter.remove('products_show')\n\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.\n","_id":"barista@0.0.10","dist":{"shasum":"e442b684b913fa469d00f21b27d61ae424b68271","tarball":"http://registry.npmjs.org/barista/-/barista-0.0.10.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.1.0":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.1.0","homepage":"http://kieran.github.io/barista/","bugs":{"url":"https://github.com/kieran/barista/issues"},"author":{"name":"Kieran Huggins","email":"kieran@kieran.ca","url":"http://kieran.ca"},"main":"./index.js","scripts":{"prepublish":"./node_modules/.bin/coffee -c ./lib/","test":"./node_modules/.bin/mocha --reporter list --growl --compilers coffee:coffee-script tests/mocha.coffee","autotest":"cd lib; ../node_modules/.bin/mocha -w --reporter list --growl --compilers coffee:coffee-script ../tests/mocha.coffee"},"engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"devDependencies":{"coffee-script":"*","mocha":"*"},"repository":{"type":"git","url":"https://github.com/kieran/barista.git"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n\nrouter.options( '/products' )\n      .to( 'products.options' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nRemoving Routes\n------------------------\n\nIn some cases, you will need to remove routes on a running router.  The `router.remove( name )` method will work for this, but requires\nuse of the otherwise unused `route.name( name )` method.\n\n### Adding a name (currently only used with this functionality)\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n      .name('products_show')\n```\n\n### Removing a named route\n\n```javascript\n\nrouter.remove('products_show')\n\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.\n","_id":"barista@0.1.0","dist":{"shasum":"79e727306208f7495df3d61b3c2c3fb1d7c39f79","tarball":"http://registry.npmjs.org/barista/-/barista-0.1.0.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}},"0.1.1":{"name":"barista","description":"URL router & generator, similar to Rails / merb","version":"0.1.1","homepage":"http://kieran.github.io/barista/","bugs":{"url":"https://github.com/kieran/barista/issues"},"author":{"name":"Kieran Huggins","email":"kieran@kieran.ca","url":"http://kieran.ca"},"main":"./index.js","scripts":{"prepublish":"./node_modules/.bin/coffee -c ./lib/","test":"./node_modules/.bin/mocha --reporter list --growl --compilers coffee:coffee-script tests/mocha.coffee","autotest":"cd lib; ../node_modules/.bin/mocha -w --reporter list --growl --compilers coffee:coffee-script ../tests/mocha.coffee"},"engines":{"node":">= 0.4.0"},"dependencies":{"inflection":"*"},"devDependencies":{"coffee-script":"*","mocha":"*"},"repository":{"type":"git","url":"https://github.com/kieran/barista.git"},"readme":"Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n\nrouter.options( '/products' )\n      .to( 'products.options' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nRemoving Routes\n------------------------\n\nIn some cases, you will need to remove routes on a running router.  The `router.remove( name )` method will work for this, but requires\nuse of the otherwise unused `route.name( name )` method.\n\n### Adding a name (currently only used with this functionality)\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n      .name('products_show')\n```\n\n### Removing a named route\n\n```javascript\n\nrouter.remove('products_show')\n\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.\n","_id":"barista@0.1.1","dist":{"shasum":"0545b581e74081d03196c1e2d38c9fe1596eec5a","tarball":"http://registry.npmjs.org/barista/-/barista-0.1.1.tgz"},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"directories":{}}},"maintainers":[{"name":"kieran","email":"kieran@kieran.ca"}],"time":{"0.0.1":"2011-06-25T01:36:10.419Z","0.0.2":"2011-06-25T05:59:39.033Z","0.0.3":"2011-08-13T04:40:18.115Z","0.0.4":"2011-08-29T18:21:31.348Z","0.0.5":"2012-02-19T09:24:44.302Z","0.0.6":"2012-09-05T05:56:21.240Z","0.0.7":"2012-09-06T19:38:49.332Z","0.0.8":"2012-10-13T23:13:23.466Z","0.0.9":"2013-07-06T04:01:00.242Z","0.0.10":"2013-07-26T03:31:42.247Z","0.1.0":"2013-07-26T19:23:32.992Z","0.1.1":"2013-08-13T13:54:18.533Z"},"author":{"name":"Kieran Huggins","email":"kieran@kieran.ca","url":"http://kieran.ca"},"repository":{"type":"git","url":"https://github.com/kieran/barista.git"},"_attachments":{"barista-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-WONPEi0Vou6U5igqJ6dFOg==","length":289046,"stub":true},"barista-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-pe7vFM3SFbF1NNDOCzIgLQ==","length":289037,"stub":true},"barista-0.0.10.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-Hl/vSTZUn7ysmya6Y1BWNw==","length":289036,"stub":true},"barista-0.0.9.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-H9QSd0+uBM9wj5Q9yMBSJw==","length":288777,"stub":true},"barista-0.0.8.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-+7HrksB9BYtpEFtEXvCLdA==","length":22710,"stub":true},"barista-0.0.7.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-efqKPjbdq77zRRHU+gecVA==","length":22517,"stub":true},"barista-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-VBZKnhEtlKxCpctTt1Jw5g==","length":26082,"stub":true},"barista-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-Wkgn/Vy8mcyrP1xDrkSSjA==","length":22384,"stub":true},"barista-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-lbfLWVOmhjmiNAcL2Sxg4w==","length":21927,"stub":true},"barista-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-ELDla3uEqzlkJUQeEyXYkg==","length":21823,"stub":true},"barista-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-QSz6bHE0JaQcqbm49b3ryw==","length":21823,"stub":true},"barista-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-ixkjVLPM+kQSCYAlpeinQw==","length":21200,"stub":true}},"_etag":"\"A9HMIJ1MW4OONNHXT75NNDSSF\""}