{"_id":"mongodb-wrapper","_rev":"38-3b47d019d06431cd14d8b4f95940dd21","name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","dist-tags":{"latest":"1.0.3"},"versions":{"0.1.0":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.1.0","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x"},"directories":{"lib":"lib"},"devDependencies":{},"_id":"mongodb-wrapper@0.1.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"dcf835ce162309e598dd5996992d534198d155b4","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.1.0.tgz"},"scripts":{}},"0.1.1":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.1.1","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x","async_testing":"0.3.2"},"directories":{"lib":"lib"},"devDependencies":{},"_id":"mongodb-wrapper@0.1.1","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"a266641b248c05109b8f40bd3e9d73aaafdd87e1","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.1.1.tgz"},"scripts":{}},"0.2.0":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.0","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x","async_testing":"0.3.2"},"directories":{"lib":"lib"},"devDependencies":{},"_id":"mongodb-wrapper@0.2.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"765129342a606349282c3b239f1f1fa92c80cd69","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.0.tgz"},"scripts":{}},"0.2.1":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.1","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x","async_testing":"0.3.2"},"directories":{"lib":"lib"},"devDependencies":{},"_id":"mongodb-wrapper@0.2.1","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"d8a1ab7fed8d21d982cc3a8cff2e21ab1f60aee9","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.1.tgz"},"scripts":{}},"0.2.2":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.2","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x","async_testing":"0.3.2"},"directories":{"lib":"lib"},"devDependencies":{},"_id":"mongodb-wrapper@0.2.2","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"0861615ae4287d4a14ee0271f354bd5e93a04182","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.2.tgz"},"scripts":{}},"0.2.3":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.3","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.x","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmJsonOpts":{"file":"/Users/seanhess/.npm/mongodb-wrapper/0.2.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongodb-wrapper@0.2.3","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"198cafedda4ecdb52b0fe3739f5be0974b2cd0ed","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.3.tgz"},"scripts":{}},"0.2.4":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.4","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.6-23","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmUser":{"name":"seanhess","email":"seanhess@gmail.com"},"_id":"mongodb-wrapper@0.2.4","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"aa4ef08fdc2d10ceac4be779c3bd0c3a96fb7ceb","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.4.tgz"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"0.2.5":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.5","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.6-23","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmUser":{"name":"seanhess","email":"seanhess@gmail.com"},"_id":"mongodb-wrapper@0.2.5","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"5fb32049729b39ba6d0a5ee660c0278a0712cdb1","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.5.tgz"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"0.2.6":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.6","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":"0.4.x"},"dependencies":{"mongodb":"0.9.6-23","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmUser":{"name":"seanhess","email":"seanhess@gmail.com"},"_id":"mongodb-wrapper@0.2.6","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"47954fcfb04d480593757221a2be5c7598c14d60","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.6.tgz"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"0.2.7":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.2.7","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","keywords":["mongodb"],"engines":{"node":">= 0.4.0"},"dependencies":{"mongodb":"0.9.6-23","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmUser":{"name":"seanhess","email":"seanhess@gmail.com"},"_id":"mongodb-wrapper@0.2.7","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"f73bcb03cae8ff400f3cb5223933399876886663","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.2.7.tgz"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\nYes, we know other people are doing the same thing. This one has been easier to use. \n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual](http://www.mongodb.org/display/DOCS/Manual)\n2. Lazy open/close of connections\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Features it doesn't have\n\n1. Connection pooling. Each db will share a single connection. \n\n## Installation\n\n<pre>\n  npm install mongodb-wrapper\n</pre>\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n<pre>\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n</pre>\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n\n\n","maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"0.3.0":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.3.0","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"node test.js"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"0.9.9-8","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_npmUser":{"name":"seanhess","email":"seanhess@gmail.com"},"_id":"mongodb-wrapper@0.3.0","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.15","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"1d6819da8510cd7daf7b8c101b24696ca765028c","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.3.0.tgz"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\nYes, we know other people are doing the same thing. This one has been easier to use. \n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n<pre>\n  npm install mongodb-wrapper\n</pre>\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n<pre>\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n</pre>\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any funciton that hits the database. \n\n#### Connecting\n\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns an unopened database object. \n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node. \n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('user')\n    db.users.count(cb)\n\n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"0.4.0":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"0.4.0","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"node test.js"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"0.9.9-8","async_testing":"0.3.2"},"directories":{"lib":"lib"},"_id":"mongodb-wrapper@0.4.0","dist":{"shasum":"5c733b0c70ceba990dd8947673d00e6ed6c68b19","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-0.4.0.tgz"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\nYes, we know other people are doing the same thing. This one has been easier to use. \n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n<pre>\n  npm install mongodb-wrapper\n</pre>\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n<pre>\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n</pre>\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns an unopened database object. \n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node. \n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"}]},"1.0.0":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"1.0.0","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"mocha --compilers coffee:coffee-script -C test.js","prepublish":"coffee -c lib/*.coffee"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"1.2.x","async":"~0.1.22"},"dev-dependencies":{"mocha":"~1.8.1"},"directories":{"lib":"lib"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\n\n## History\n\nv1.0.0 - A complete rewrite of the driver that now uses mongoclient. The interface is generally the same, but all the messiness\nof reconnecting has been removed, as thats transparently handeled by the mongo client. If you see any breakage, please open an issue!\n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections (now handeled by the low level node-mongodb-native)\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n```\n  npm install mongodb-wrapper\n```\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n``` JavaScript\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n```\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\nThere are lots of ways to open up a database connection\n`mongo.db(mongodbConnectionString)` - returns a database object, for details on the connection string see [mongodb docs](http://mongodb.github.com/node-mongodb-native/driver-articles/mongoclient.html)\n* NOTE: this mode does not support a prefix!\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns a database project\n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node.\n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n`cursor.getRawCursor` - retrieves a raw mongodb-native cursor, so you can do things like cursor streams, and other fancy things not supported\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","readmeFilename":"Readme.md","_id":"mongodb-wrapper@1.0.0","dist":{"shasum":"8c358a72c30b0fa6b4abfde2f8f6898af7838e07","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-1.0.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"addisonj","email":"addisonj@gmail.com"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"},{"name":"addisonj","email":"addisonj@gmail.com"}]},"1.0.1":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"1.0.1","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"mocha --compilers coffee:coffee-script -C test.js","prepublish":"coffee -c lib/*.coffee"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"1.2.x","async":"~0.1.22"},"dev-dependencies":{"mocha":"~1.8.1"},"directories":{"lib":"lib"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\n\n## History\n\nv1.0.0 - A complete rewrite of the driver that now uses mongoclient. The interface is generally the same, but all the messiness\nof reconnecting has been removed, as thats transparently handeled by the mongo client. If you see any breakage, please open an issue!\n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections (now handeled by the low level node-mongodb-native)\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n```\n  npm install mongodb-wrapper\n```\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n``` JavaScript\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n```\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\nThere are lots of ways to open up a database connection\n`mongo.db(mongodbConnectionString)` - returns a database object, for details on the connection string see [mongodb docs](http://mongodb.github.com/node-mongodb-native/driver-articles/mongoclient.html)\n* NOTE: this mode does not support a prefix!\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns a database project\n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node.\n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n`cursor.getRawCursor` - retrieves a raw mongodb-native cursor, so you can do things like cursor streams, and other fancy things not supported\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","readmeFilename":"Readme.md","_id":"mongodb-wrapper@1.0.1","dist":{"shasum":"9cec834c90716ccdd3c05e4b0bae8b05ee9cbec5","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-1.0.1.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"addisonj","email":"addisonj@gmail.com"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"},{"name":"addisonj","email":"addisonj@gmail.com"}]},"1.0.2":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"1.0.2","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"mocha --compilers coffee:coffee-script -C test.js","prepublish":"coffee -c lib/*.coffee"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"1.2.x","async":"~0.1.22"},"dev-dependencies":{"mocha":"~1.8.1"},"directories":{"lib":"lib"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\n\n## History\n\nv1.0.0 - A complete rewrite of the driver that now uses mongoclient. The interface is generally the same, but all the messiness\nof reconnecting has been removed, as thats transparently handeled by the mongo client. If you see any breakage, please open an issue!\n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections (now handeled by the low level node-mongodb-native)\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n```\n  npm install mongodb-wrapper\n```\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n``` JavaScript\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n```\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\nThere are lots of ways to open up a database connection\n`mongo.db(mongodbConnectionString)` - returns a database object, for details on the connection string see [mongodb docs](http://mongodb.github.com/node-mongodb-native/driver-articles/mongoclient.html)\n* NOTE: this mode does not support a prefix!\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns a database project\n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node.\n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n`cursor.getRawCursor` - retrieves a raw mongodb-native cursor, so you can do things like cursor streams, and other fancy things not supported\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","readmeFilename":"Readme.md","_id":"mongodb-wrapper@1.0.2","dist":{"shasum":"0509b351c5f882be37026473a4ac6ced71b44137","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-1.0.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"addisonj","email":"addisonj@gmail.com"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"},{"name":"addisonj","email":"addisonj@gmail.com"}]},"1.0.3":{"name":"mongodb-wrapper","description":"Exactly-like-the-console wrapper for node-mongodb-native","version":"1.0.3","author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"bugs":{"email":"sean@i.tv","url":"http://github.com/idottv/node-mongodb-wrapper/issues"},"main":"index","scripts":{"test":"mocha --compilers coffee:coffee-script -C test.js","prepublish":"coffee -c lib/*.coffee"},"keywords":["mongodb"],"engines":{"node":">= 0.6.0"},"dependencies":{"mongodb":"1.2.x","async":"~0.1.22"},"devDependencies":{"mocha":"~1.8.1","coffee-script":"1.6.x"},"directories":{"lib":"lib"},"readme":"[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\n\n## History\n\nv1.0.0 - A complete rewrite of the driver that now uses mongoclient. The interface is generally the same, but all the messiness\nof reconnecting has been removed, as thats transparently handeled by the mongo client. If you see any breakage, please open an issue!\n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections (now handeled by the low level node-mongodb-native)\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n```\n  npm install mongodb-wrapper\n```\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n``` JavaScript\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n```\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\nThere are lots of ways to open up a database connection\n`mongo.db(mongodbConnectionString)` - returns a database object, for details on the connection string see [mongodb docs](http://mongodb.github.com/node-mongodb-native/driver-articles/mongoclient.html)\n* NOTE: this mode does not support a prefix!\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns a database project\n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node.\n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n`cursor.getRawCursor` - retrieves a raw mongodb-native cursor, so you can do things like cursor streams, and other fancy things not supported\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n","readmeFilename":"Readme.md","_id":"mongodb-wrapper@1.0.3","dist":{"shasum":"8bae5f47d8d721004df228df17d3583560cde04d","tarball":"http://registry.npmjs.org/mongodb-wrapper/-/mongodb-wrapper-1.0.3.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"addisonj","email":"addisonj@gmail.com"},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"},{"name":"addisonj","email":"addisonj@gmail.com"}]}},"maintainers":[{"name":"seanhess","email":"seanhess@gmail.com"},{"name":"addisonj","email":"addisonj@gmail.com"}],"time":{"0.1.0":"2011-05-26T18:01:57.324Z","0.1.1":"2011-05-26T21:21:36.710Z","0.2.0":"2011-05-31T20:55:21.518Z","0.2.1":"2011-06-02T22:44:19.425Z","0.2.2":"2011-06-10T17:16:27.419Z","0.2.3":"2011-06-29T03:20:41.192Z","0.2.4":"2011-11-07T18:57:37.594Z","0.2.5":"2011-11-07T19:33:42.980Z","0.2.6":"2011-11-10T03:37:30.412Z","0.2.7":"2012-01-19T17:03:41.002Z","0.3.0":"2012-04-19T17:44:50.959Z","0.4.0":"2012-08-28T16:57:42.565Z","1.0.0":"2013-01-24T17:14:44.655Z","1.0.1":"2013-01-24T18:52:14.569Z","1.0.2":"2013-01-24T19:37:06.423Z","1.0.3":"2013-04-18T15:06:42.902Z"},"author":{"name":"i.TV","email":"sean@i.tv"},"repository":{"type":"git","url":"git://github.com/idottv/node-mongodb-wrapper.git"},"_attachments":{"mongodb-wrapper-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-0b8ESfT18FYrWD+Np54yaQ==","length":13197,"stub":true},"mongodb-wrapper-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-prs2WWUaNBBjn29nD9QzZw==","length":13107,"stub":true},"mongodb-wrapper-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-PVyzyVP1N/1C9Iw8JZMlpw==","length":13019,"stub":true},"mongodb-wrapper-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":32,"digest":"md5-l1+k3q0kENLCM+O/PM3dEg==","length":18695,"stub":true},"mongodb-wrapper-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-RkmaTnF556OWelya+Xersw==","length":13261,"stub":true},"mongodb-wrapper-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-jcZ0GQTfau8KCklbGr2YNA==","length":12745,"stub":true},"mongodb-wrapper-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-9+pmGX7V+x3aSnTfQ9d3Dw==","length":11814,"stub":true},"mongodb-wrapper-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-1vzWSZMOJcxwxKa55u7rhA==","length":20480,"stub":true},"mongodb-wrapper-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-zcrfuWuN3+weVu2lx3XA2w==","length":20480,"stub":true},"mongodb-wrapper-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-c3wGDzzaBz+Kuv8hg9MZ3Q==","length":20480,"stub":true},"mongodb-wrapper-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-hJVd5dnWSUETCc9pLbb5kg==","length":13006,"stub":true},"mongodb-wrapper-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-3gnACxslm8DkfwQqRdd+zw==","length":12525,"stub":true},"mongodb-wrapper-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-BFxS91LnzejMNFqywbiKdA==","length":12296,"stub":true},"mongodb-wrapper-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-LwZCworIcEn/u2EBTJ+CsA==","length":12298,"stub":true},"mongodb-wrapper-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-71nbFwzKvBbv1ogcd2Rixw==","length":11977,"stub":true},"mongodb-wrapper-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-WYpw8JnvlPAKmOnKTOvQzQ==","length":6478,"stub":true}},"_etag":"\"4MLGMONSTMHIHTDZ77I55OL58\""}