{"_id":"inflection","_rev":"29-4477d3811bef71a6b2a5a6daa8a036d6","name":"inflection","description":"A port of inflection-js to node.js module","dist-tags":{"latest":"1.2.6"},"versions":{"0.0.1":{"name":"inflection","version":"0.0.1","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"dependencies":{},"devDependencies":{"node.flow":"0.0.3","should":"0.5.1"},"main":"index","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"license":"MIT","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@0.0.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"f9071c16f17465a2095e971982621802ce476f80","tarball":"http://registry.npmjs.org/inflection/-/inflection-0.0.1.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.0.0":{"name":"inflection","version":"1.0.0","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"dependencies":{},"devDependencies":{"node.flow":"0.0.3","should":"0.5.1"},"main":"index","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"license":"MIT","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@1.0.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"f177a21a371396a4f69b372c83f55f06ee32cc76","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.0.0.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.1.0":{"name":"inflection","version":"1.1.0","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"dependencies":{},"devDependencies":{"node.flow":"0.1.0","should":"0.5.1"},"main":"index","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"license":"MIT","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@1.1.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"bf7b4ceba663254627b6721653b034c6be6123e0","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.1.0.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.1.1":{"name":"inflection","version":"1.1.1","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"dependencies":{},"devDependencies":{"node.flow":"1.1.0","should":"0.5.1"},"main":"index","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"license":"MIT","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@1.1.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"5e3d47d05ac2a714290d28f2fbc1b0ad67076b75","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.1.1.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.0":{"name":"inflection","version":"1.2.0","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"dependencies":{},"devDependencies":{"node.flow":"1.1.1","should":"0.6.3"},"main":"./lib/inflection.js","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@1.2.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"e6b5ea0be2b79593dbf57c7ccc2cca28144c91c1","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.0.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.1":{"name":"inflection","version":"1.2.1","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"}],"dependencies":{},"devDependencies":{"node.flow":"1.1.1","should":"0.6.3"},"main":"./lib/inflection.js","repository":{"type":"git","url":"git://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"_id":"inflection@1.2.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"6ccade7c7f39b019876af24c5ead6bc6db5e668a","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.1.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.2":{"name":"inflection","version":"1.2.2","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"}],"dependencies":{},"devDependencies":{"node.flow":"1.1.3","should":"1.0.0"},"main":"./lib/inflection.js","repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of [extending JavaScript native](http://wonko.com/post/extending-javascript-natives) String object like `inflection-js` does, `inflection` separate the methods to a independent package to avoid unexpected behaviors.\n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n    npm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n    var inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n    type: Array\n    desc: The subject array.\n\n> item\n\n    type: Object\n    desc: Object to locate in the Array.\n\n> fromIndex\n\n    type: Number\n    desc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n    type: Function\n    desc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n    inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> plural\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.pluralize( 'person' ); // === 'people'\n    inflection.pluralize( 'octopus' ); // === \"octopi\"\n    inflection.pluralize( 'Hat' ); // === 'Hats'\n    inflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> singular\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.singularize( 'people' ); // === 'person'\n    inflection.singularize( 'octopi' ); // === \"octopus\"\n    inflection.singularize( 'Hats' ); // === 'Hat'\n    inflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n    inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n    inflection.underscore( 'messageProperties' ); // === 'message_properties'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.humanize( 'message_properties' ); // === 'Message properties'\n    inflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n    inflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.dasherize( 'message_properties' ); // === 'message-properties'\n    inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.titleize( 'message_properties' ); // === 'Message Properties'\n    inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n    inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n- Lance Pollard <lancejpollard@gmail.com> (Browser support)\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"inflection@1.2.2","dist":{"shasum":"30acac04a47a2772e785efd66810f47c9ff157dd","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.2.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.3":{"name":"inflection","version":"1.2.3","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"}],"dependencies":{},"devDependencies":{"node.flow":"1.1.3","should":"1.1.0"},"main":"./lib/inflection.js","repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of [extending JavaScript native](http://wonko.com/post/extending-javascript-natives) String object like `inflection-js` does, `inflection` separate the methods to a independent package to avoid unexpected behaviors.\n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n    npm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n    var inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n    type: Array\n    desc: The subject array.\n\n> item\n\n    type: Object\n    desc: Object to locate in the Array.\n\n> fromIndex\n\n    type: Number\n    desc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n    type: Function\n    desc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n    inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> plural\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.pluralize( 'person' ); // === 'people'\n    inflection.pluralize( 'octopus' ); // === \"octopi\"\n    inflection.pluralize( 'Hat' ); // === 'Hats'\n    inflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> singular\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.singularize( 'people' ); // === 'person'\n    inflection.singularize( 'octopi' ); // === \"octopus\"\n    inflection.singularize( 'Hats' ); // === 'Hat'\n    inflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n    inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n    inflection.underscore( 'messageProperties' ); // === 'message_properties'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.humanize( 'message_properties' ); // === 'Message properties'\n    inflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n    inflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.dasherize( 'message_properties' ); // === 'message-properties'\n    inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.titleize( 'message_properties' ); // === 'Message Properties'\n    inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n    inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n- Lance Pollard <lancejpollard@gmail.com> (Browser support)\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"inflection@1.2.3","dist":{"shasum":"ed82e64b798277915599c6b81c02325b483aec4c","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.3.tgz"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.4":{"name":"inflection","version":"1.2.4","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"}],"dependencies":{},"devDependencies":{"node.flow":"1.2.2","should":"1.2.1"},"main":"./lib/inflection.js","repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of [extending JavaScript native](http://wonko.com/post/extending-javascript-natives) String object like `inflection-js` does, `inflection` separate the methods to a independent package to avoid unexpected behaviors.\n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n    npm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n    var inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n    type: Array\n    desc: The subject array.\n\n> item\n\n    type: Object\n    desc: Object to locate in the Array.\n\n> fromIndex\n\n    type: Number\n    desc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n    type: Function\n    desc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n    inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> plural\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.pluralize( 'person' ); // === 'people'\n    inflection.pluralize( 'octopus' ); // === \"octopi\"\n    inflection.pluralize( 'Hat' ); // === 'Hats'\n    inflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> singular\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.singularize( 'people' ); // === 'person'\n    inflection.singularize( 'octopi' ); // === \"octopus\"\n    inflection.singularize( 'Hats' ); // === 'Hat'\n    inflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n    inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n    inflection.underscore( 'messageProperties' ); // === 'message_properties'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.humanize( 'message_properties' ); // === 'Message properties'\n    inflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n    inflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.dasherize( 'message_properties' ); // === 'message-properties'\n    inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.titleize( 'message_properties' ); // === 'Message Properties'\n    inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n    inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n- Lance Pollard <lancejpollard@gmail.com> (Browser support)\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"inflection@1.2.4","dist":{"shasum":"ad1448a111ad8157d67c79ba798315532656bd1f","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.4.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.5":{"name":"inflection","version":"1.2.5","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"},{"name":"brandondewitt"}],"dependencies":{},"devDependencies":{"node.flow":"1.2.2","should":"1.2.1"},"main":"./lib/inflection.js","repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of [extending JavaScript native](http://wonko.com/post/extending-javascript-natives) String object like `inflection-js` does, `inflection` separate the methods to a independent package to avoid unexpected behaviors.\n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n\tnpm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str, allUpperCase );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n\tvar inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n\ttype: Array\n\tdesc: The subject array.\n\n> item\n\n\ttype: Object\n\tdesc: Object to locate in the Array.\n\n> fromIndex\n\n\ttype: Number\n\tdesc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n\ttype: Function\n\tdesc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n\tinflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> plural\n\n\ttype: String\n\tdesc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.pluralize( 'person' ); // === 'people'\n\tinflection.pluralize( 'octopus' ); // === \"octopi\"\n\tinflection.pluralize( 'Hat' ); // === 'Hats'\n\tinflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> singular\n\n\ttype: String\n\tdesc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.singularize( 'people' ); // === 'person'\n\tinflection.singularize( 'octopi' ); // === \"octopus\"\n\tinflection.singularize( 'Hats' ); // === 'Hat'\n\tinflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.camelize( 'message_properties' ); // === 'MessageProperties'\n\tinflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str, allUpperCase );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> allUpperCase\n\n\ttype: Boolean\n\tdesc: Default is to lowercase and add underscore prefix\n\n\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.underscore( 'MessageProperties' ); // === 'message_properties'\n\tinflection.underscore( 'messageProperties' ); // === 'message_properties'\n\tinflection.underscore( 'MP' ); // === 'm_p'\n\tinflection.underscore( 'MP', true ); // === 'MP'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.humanize( 'message_properties' ); // === 'Message properties'\n\tinflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.capitalize( 'message_properties' ); // === 'Message_properties'\n\tinflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.dasherize( 'message_properties' ); // === 'message-properties'\n\tinflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.titleize( 'message_properties' ); // === 'Message Properties'\n\tinflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n\tinflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n- Lance Pollard <lancejpollard@gmail.com> (Browser support)\n- brandondewitt\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"inflection@1.2.5","dist":{"shasum":"d19e8d809ea226948ae60589ff943d7f1eb9d356","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.5.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}},"1.2.6":{"name":"inflection","version":"1.2.6","description":"A port of inflection-js to node.js module","keywords":["inflection","inflections","inflection-js","pluralize","singularize","camelize","underscore","humanize","capitalize","dasherize","titleize","demodulize","tableize","classify","foreign_key","ordinalize"],"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"contributors":[{"name":"Ryan Schuft","email":"ryan.schuft@gmail.com"},{"name":"Ben Lin","email":"ben@dreamerslab.com"},{"name":"Lance Pollard","email":"lancejpollard@gmail.com"},{"name":"brandondewitt"}],"dependencies":{},"devDependencies":{"node.flow":"1.2.2","should":"1.2.2"},"main":"./lib/inflection.js","repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"engines":["node >= 0.4.0"],"licenses":[{"type":"MIT","url":"http://en.wikipedia.org/wiki/MIT_License"}],"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of [extending JavaScript native](http://wonko.com/post/extending-javascript-natives) String object like `inflection-js` does, `inflection` separate the methods to a independent package to avoid unexpected behaviors.\n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n\tnpm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str, allUpperCase );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n\tvar inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n\ttype: Array\n\tdesc: The subject array.\n\n> item\n\n\ttype: Object\n\tdesc: Object to locate in the Array.\n\n> fromIndex\n\n\ttype: Number\n\tdesc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n\ttype: Function\n\tdesc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n\tinflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> plural\n\n\ttype: String\n\tdesc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.pluralize( 'person' ); // === 'people'\n\tinflection.pluralize( 'octopus' ); // === \"octopi\"\n\tinflection.pluralize( 'Hat' ); // === 'Hats'\n\tinflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> singular\n\n\ttype: String\n\tdesc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.singularize( 'people' ); // === 'person'\n\tinflection.singularize( 'octopi' ); // === \"octopus\"\n\tinflection.singularize( 'Hats' ); // === 'Hat'\n\tinflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.camelize( 'message_properties' ); // === 'MessageProperties'\n\tinflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str, allUpperCase );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> allUpperCase\n\n\ttype: Boolean\n\tdesc: Default is to lowercase and add underscore prefix\n\n\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.underscore( 'MessageProperties' ); // === 'message_properties'\n\tinflection.underscore( 'messageProperties' ); // === 'message_properties'\n\tinflection.underscore( 'MP' ); // === 'm_p'\n\tinflection.underscore( 'MP', true ); // === 'MP'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.humanize( 'message_properties' ); // === 'Message properties'\n\tinflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.capitalize( 'message_properties' ); // === 'Message_properties'\n\tinflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.dasherize( 'message_properties' ); // === 'message-properties'\n\tinflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.titleize( 'message_properties' ); // === 'Message Properties'\n\tinflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n> lowFirstLetter\n\n\ttype: Boolean\n\tdesc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n\tinflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n\ttype: String\n\tdesc: The subject string.\n\n#### Example code\n\n\tvar inflection = require( 'inflection' );\n\n\tinflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n- Lance Pollard <lancejpollard@gmail.com> (Browser support)\n- brandondewitt\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/dreamerslab/node.inflection/issues"},"_id":"inflection@1.2.6","dist":{"shasum":"9d0771a04b0ca50c44c99f25c48c6a33ce3c4b60","tarball":"http://registry.npmjs.org/inflection/-/inflection-1.2.6.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"directories":{}}},"readme":"# inflection\n\nA port of inflection-js to node.js module\n\n\n\n## Description\n[inflection-js](http://code.google.com/p/inflection-js/) is a port of the functionality from Ruby on Rails' Active Support Inflection classes into Javascript. `inflection` is a port of `inflection-js` to node.js npm package. Instead of extending JavaScript native String object like `inflection-js`, `inflection` separate the methods to a independent package to avoid unexpected behaviors. \n\n\n\n## Requires\n\nCheckout `package.json` for dependencies.\n\n\n\n## Installation\n\nInstall inflection through npm\n\n    npm install inflection\n\n\n\n## API\n\n- inflection.indexOf( arr, item, fromIndex, compareFunc );\n- inflection.pluralize( str, plural );\n- inflection.singularize( str, singular );\n- inflection.camelize( str, lowFirstLetter );\n- inflection.underscore( str );\n- inflection.humanize( str, lowFirstLetter );\n- inflection.capitalize( str );\n- inflection.dasherize( str );\n- inflection.titleize( str );\n- inflection.demodulize( str );\n- inflection.tableize( str );\n- inflection.classify( str );\n- inflection.foreign_key( str, dropIdUbar );\n- inflection.ordinalize( str );\n\n\n\n## Usage\n\n> Require the module before using\n\n    var inflection = require( 'inflection' );\n\n\n\n### inflection.indexOf( arr, item, fromIndex, compareFunc );\n\nThis lets us detect if an Array contains a given element.\n\n#### Arguments\n\n> arr\n\n    type: Array\n    desc: The subject array.\n\n> item\n\n    type: Object\n    desc: Object to locate in the Array.\n\n> fromIndex\n\n    type: Number\n    desc: Starts checking from this position in the Array.(optional)\n\n> compareFunc\n\n    type: Function\n    desc: Function used to compare Array item vs passed item.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n    inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n\n\n\n### inflection.pluralize( str, plural );\n\nThis function adds pluralization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> plural\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.pluralize( 'person' ); // === 'people'\n    inflection.pluralize( 'octopus' ); // === \"octopi\"\n    inflection.pluralize( 'Hat' ); // === 'Hats'\n    inflection.pluralize( 'person', 'guys' ); // === 'guys'\n\n\n\n### inflection.singularize( str, singular );\n\nThis function adds singularization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> singular\n\n    type: String\n    desc: Overrides normal output with said String.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.singularize( 'people' ); // === 'person'\n    inflection.singularize( 'octopi' ); // === \"octopus\"\n    inflection.singularize( 'Hats' ); // === 'Hat'\n    inflection.singularize( 'guys', 'person' ); // === 'person'\n\n\n\n### inflection.camelize( str, lowFirstLetter );\n\nThis function adds camelization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n    inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n\n\n\n### inflection.underscore( str );\n\nThis function adds underscore support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n    inflection.underscore( 'messageProperties' ); // === 'message_properties'\n\n\n\n### inflection.humanize( str, lowFirstLetter );\n\nThis function adds humanize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to capitalize the first letter of the results. Passing true will lowercase it. (optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.humanize( 'message_properties' ); // === 'Message properties'\n    inflection.humanize( 'message_properties', true ); // === 'message properties'\n\n\n\n### inflection.capitalize( str );\n\nThis function adds capitalization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n    inflection.capitalize( 'message properties', true ); // === 'Message properties'\n\n\n\n### inflection.dasherize( str );\n\nThis function adds dasherization support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.dasherize( 'message_properties' ); // === 'message-properties'\n    inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n\n\n\n### inflection.titleize( str );\n\nThis function adds titleize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.titleize( 'message_properties' ); // === 'Message Properties'\n    inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n\n\n\n### inflection.demodulize( str );\n\nThis function adds demodulize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n\n\n\n### inflection.tableize( str );\n\nThis function adds tableize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n\n\n\n### inflection.classify( str );\n\nThis function adds classification support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n\n\n\n### inflection.foreign_key( str, dropIdUbar );\n\nThis function adds foreign key support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n> lowFirstLetter\n\n    type: Boolean\n    desc: Default is to seperate id with an underbar at the end of the class name, you can pass true to skip it.(optional)\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n    inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n\n\n\n### inflection.ordinalize( str );\n\nThis function adds ordinalize support to every String object.\n\n#### Arguments\n\n> str\n\n    type: String\n    desc: The subject string.\n\n#### Example code\n\n    var inflection = require( 'inflection' );\n\n    inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n\n\n\n## Credit\n\n- Ryan Schuft <ryan.schuft@gmail.com>\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainers":[{"name":"dreamerslab","email":"ben@dreamerslab.com"}],"time":{"0.0.1":"2012-01-18T11:51:14.334Z","1.0.0":"2012-02-07T16:18:56.155Z","1.1.0":"2012-02-13T07:41:20.995Z","1.1.1":"2012-02-16T10:26:44.815Z","1.2.0":"2012-06-19T08:02:15.915Z","1.2.1":"2012-06-22T06:11:12.947Z","1.2.2":"2012-07-23T04:20:49.534Z","1.2.3":"2012-08-02T06:44:18.375Z","1.2.4":"2013-01-05T23:00:20.330Z","1.2.5":"2013-01-09T03:21:09.838Z","1.2.6":"2013-05-24T16:16:29.617Z"},"author":{"name":"dreamerslab","email":"ben@dreamerslab.com"},"repository":{"type":"git","url":"https://github.com/dreamerslab/node.inflection.git"},"users":{"fgribreau":true,"kastor":true},"_attachments":{"inflection-1.2.6.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-/BuQhKYL8ox6oNwvjYrs4Q==","length":6713,"stub":true},"inflection-1.2.5.tgz":{"content_type":"application/octet-stream","revpos":26,"digest":"md5-LTzkk/uLsSglNhyFaXmdVQ==","length":6794,"stub":true},"inflection-1.2.4.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-hOdPpUSKFV4JB3gH7k/OQA==","length":6618,"stub":true},"inflection-1.2.3.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-Sju07EBfQnEO3PsFYu9WmA==","length":6596,"stub":true},"inflection-1.2.2.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-pq5k1WpssbjO/jSWjT9sbg==","length":6430,"stub":true},"inflection-1.2.1.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-eyVEAXYfvPOorZmm5Llk5Q==","length":6399,"stub":true},"inflection-1.2.0.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-1MXa1R02sjX30bcamSCUYA==","length":6300,"stub":true},"inflection-1.1.1.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-5QWx5GwsAK123TSKQDF5Ww==","length":6205,"stub":true},"inflection-1.1.0.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-9mNpeLCe821Xkikcv1E+tg==","length":6196,"stub":true},"inflection-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-hYzni77s7t18zFeMNB6twg==","length":6085,"stub":true},"inflection-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-v9rL0Yb8kRtjyi1zt28lqg==","length":5908,"stub":true}},"_etag":"\"DOMZNOZD187V0N2C3E8UVA366\""}