{"_id":"geddy","_rev":"243-3aa637af65428b971e7b996aa52e9157","name":"geddy","dist-tags":{"latest":"0.10.5"},"versions":{"0.1.1":{"name":"geddy","version":"0.1.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"scripts":{"install":"make && make install","uninstall":"make uninstall"},"_id":"geddy@0.1.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/geddy/-/geddy-0.1.1.tgz","shasum":"57cb5d7dd3b7bdfb2e9bbb7e478676fa7d471f50"},"directories":{}},"0.1.3":{"name":"geddy","version":"0.1.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"scripts":{"install":"make && make install","uninstall":"make uninstall"},"_id":"geddy@0.1.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/geddy/-/geddy-0.1.3.tgz","bin":{"0.4-sunos-5.11":{"shasum":"fb5038600bbc8e59a90065f7cbc8b48b38180dff","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.1.3-0.4-sunos-5.11.tgz"}},"shasum":"5504c44f7489ca0327950bb56c70ae77b5b40a25"},"directories":{}},"0.2.0":{"name":"geddy","version":"0.2.0","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.0","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"fb8bb9cd0be88ab088fefa726edfef1884ad1311","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.0.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.1":{"name":"geddy","version":"0.2.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.1","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"d8295a9ad103a82f21e706316c77c4347dad6267","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.1.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.2":{"name":"geddy","version":"0.2.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.2","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"5f10ba62aa3a34c5bc44308ced192934d71c8455","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.2.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.3":{"name":"geddy","version":"0.2.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.3","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"0ed54ba9e0e0e86a5b4b93833ca23e9ebfcbb374","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.3.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.4":{"name":"geddy","version":"0.2.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.4","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"66b5a48943e7d46f1f52ccf7d3d9e0e8bda3ade2","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.4.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.5":{"name":"geddy","version":"0.2.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.5","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a8a0ddc355d35fba3d448803533cccf5057658c1","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.5.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.6":{"name":"geddy","version":"0.2.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.6","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"718b5c0ddfd5aefee1a3a18b4deac528e2332cab","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.6.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.7":{"name":"geddy","version":"0.2.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.7","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"da149b6fdaf53697ccb79ffea72c01f8346c00ad","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.7.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.8":{"name":"geddy","version":"0.2.8","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.8","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"9baf6735f56b4b23a47316e0afcd1f82c0228a85","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.8.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.9":{"name":"geddy","version":"0.2.9","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.9","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"8922145fca3bc228b6159c8fe702f66b9aa93394","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.9.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.10":{"name":"geddy","version":"0.2.10","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.10","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"cd519bcbc6e0a82e5f787a39a784fe29dc27eaea","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.10.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.2.11":{"name":"geddy","version":"0.2.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.1.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.2.11","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"4066597cf222d47ca6740149f7197d7777188265","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.2.11.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"184c4c24af0d1d885c476b22bf5be8d36e7f85ae","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.1.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie, CouchDB)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"b6ec9c516f79646fff1d7a8f0183ee572ece0034","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.2.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie, CouchDB)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"65529fe2e7ebcf8636c6a25d2c9d547b63039fb6","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.3.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"e79626cd02c83c90b9a323472ef9e6dd6c653919","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.4.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"62cb29b1e9fc6edef195076b7f81376f3123b92d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.6.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.7","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"1e91cb41133bf693d58ea9081b371a9d57658e92","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.7.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.9":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.9","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.9","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"28a279408702e6bbd9a460b316cbee9c88c1bf4b","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.9.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.10":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.10","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.10","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"c1ea409b59fb306be2aa5f11ae1c45ea80731c5a","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.10.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.11":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.11","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"c3c77a3fb338b02f0b32169cfb126e566bbb60ab","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.11.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.12":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.12","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.12","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"5a865d1014c59be168944b6413bebc75562a5c97","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.12.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.13":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.13","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.13","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"4cbb5ed067fe70fec42d6721ee9b94da3cbe1b2c","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.13.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.14":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.14","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.14","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"caceab7fea2c9e1426be1f4bd3d2bb559e0bd0c9","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.14.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] ./app/models/snow_dog.js\n    [ADDED] ./app/controllers/snow_dogs.js\n    Resource snow_dogs route added to ./config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n        item = {foo: 'FOO', bar: 1, baz: false};\n          this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login:      {type: 'string', required: true}\n      , password:   {type: 'string', required: true}\n      , lastName:   {type: 'string'}\n      , firstName:  {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex',\n      password: 'lerxst',\n      lastName: 'Lifeson',\n      firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex',\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.15":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.15","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.15","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"76154ead68ca8aa2c430b874448da27b40db8d5b","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.15.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.16":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.16","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.16","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"f7787522f35b23af5652591689b1a0657046a583","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.16.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.18":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.18","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.18","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"64cc5dfc30caeac822009fc6ca0a3d7c5362fa79","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.18.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.19":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.19","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.19","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"c9a0c430449322fb7a3658cb7229d4d9eb9271df","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.19.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.20":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.20","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.20","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"ed5b9072487fd39b921be4ff63be89e5b125426a","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.20.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.3.21":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.3.21","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.3.21","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"e20fc4cd5abc7fd98691bfed0e83638aebe09558","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.3.21.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n    router.match('/moving/pictures/:id').to(\n      {controller: 'Moving', action: 'pictures'});\n\n    router.match('/farewells/:farewelltype/kings/:kingid').to(\n       {controller: 'Farewells', action: 'kings'});\n\n    //Can also match specific HTTP methods only\n    router.match('/xandadu', 'get').to(\n      {controller: 'Xandadu', action: 'specialHandler'});\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n    var SnowDogs = function () {\n      this.respondsWith = ['text', 'json', 'html'];\n\n      this.index = function (params) {\n        this.respond({params: params});\n      };\n\n      this.add = function (params) {\n        this.respond({params: params});\n      };\n\n      this.create = function (params) {\n        this.respond({params: params});\n      };\n\n      this.show = function (params) {\n        this.respond({params: params});\n      };\n\n      this.update = function (params) {\n        this.respond({params: params});\n      };\n\n      this.remove = function (params) {\n        this.respond({params: params});\n      };\n\n    };\n\n    exports.SnowDogs = SnowDogs;\n\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n    this.respondsWith = ['text', 'json'];\n\n    this.show = function (params) {\n      // (Fetch some item by params.id)\n      item = {foo: 'FOO', bar: 1, baz: false};\n      this.respond(item);\n    };\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n    var User = function () {\n      this.property('login', 'string', {required: true});\n      this.property('password', 'string', {required: true});\n      this.property('lastName', 'string');\n      this.property('firstName', 'string');\n\n      this.validatesPresent('login');\n      this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n      this.validatesLength('login', {min: 3});\n      this.validatesConfirmed('password', 'confirmPassword');\n      this.validatesWithFunction('password', function (s) {\n          // Something that returns true or false\n          return s.length > 0;\n      });\n\n      // Can define methods for instances like this\n      this.someMethod = function () {\n        // Do some stuff\n      };\n    };\n\n    // Can also define them on the prototype\n    User.prototype.someOtherMethod = function () {\n      // Do some other stuff\n    };\n\n    User = geddy.model.registerModel('User', User);\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n    var User = function () {\n      this.defineProperties({\n        login: {type: 'string', required: true}\n      , password: {type: 'string', required: true}\n      , lastName: {type: 'string'}\n      , firstName: {type: 'string'}\n      });\n    }\n\nCreating an instance of one of these models is easy:\n\n    var params = {\n      login: 'alex'\n    , password: 'lerxst'\n    , lastName: 'Lifeson'\n    , firstName: 'Alex'\n    };\n    var user = User.create(params);\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n    // Leaving out the required password field\n    var params = {\n      login: 'alex'\n    };\n    var user = User.create(params);\n\n    // Prints 'false'\n    sys.puts(user.valid());\n    // Prints 'Field \"password\" is required'\n    sys.puts(user.errors.password);\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.4.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"9abd498c796ebe012e1d579e9c58aaf96499d54d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.1.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n```javascript\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  // (Fetch some item by params.id)\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nsys.puts(user.valid());\n// Prints 'Field \"password\" is required'\nsys.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.2.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.4.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"49f1b570f48489b93780cb42f67e52d9b572d738","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.2.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n```javascript\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n{\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  // (Fetch some item by params.id)\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nsys.puts(user.valid());\n// Prints 'Field \"password\" is required'\nsys.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.3.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.4.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"c28a0fc94c6fca2fccaadd42f6af76785ce1fee0","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.3.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App and resource generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Templating (EJS), partials support\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.4.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing\n\nTo get Geddy from GitHub and install it:\n\n    git clone git://github.com/mde/geddy.git\n    cd geddy\n    make && sudo make install\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n    make && make install PREFIX=~/geddy\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n    npm install -g geddy\n\nNote that Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Routes\n\nRoutes are similar to Merb or Rails routes.\n\n**Basic routes**\n\n```javascript\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n**Resource-based routes**\n\n    router.resource('hemispheres');\n\n### Creating a Geddy app\n\nYou can use Geddy to create an app. Run `geddy app [app-name]` to\ncreate an app. Then Run `geddy` inside the app-directory to start\nthe server.\n\n    mde@localhost:~/work$ geddy app bytor\n    Created app bytor.\n    mde@localhost:~/work$ cd bytor\n    mde@localhost:~/work/bytor$ geddy\n    Server running at http://127.0.0.1:4000/\n\nGo to http://localhost:4000/, and you should see:\n\nAttention all planets of the Solar Federation\n\n### Adding resources\n\nUse `geddy resource` in your app directory to add a\nresource. The route will be set up automatically for you.\n\n    mde@localhost:~/work/bytor$ geddy resource snow_dog\n    [ADDED] app/models/snow_dog.js\n    [ADDED] app/controllers/snow_dogs.js\n    Resource snow_dogs route added to config/router.js\n    Created view templates.\n\nRestart Geddy, and you'll see the new route working. Hit your\nnew route -- for example, http://localhost:4000/snow_dogs.json,\nand you should see something like this:\n\n    {\"method\":\"index\",\"params\":{\"extension\":\"json\"}}\n\nThe geddy generator utility also handles fancy pluralization\nbetween model and controller. Specify your resource-name as a\nsingular naun, and the generator will do the right thing --\nchanging 'person' to 'people,' etc.\n\n### App layout\n\nAfter adding a resource, a Geddy app is laid out like this:\n\n    mde@localhost:~/work/bytor$ find .\n    .\n    ./config\n    ./config/config.js\n    ./config/router.js\n    ./app\n    ./app/models\n    ./app/models/snow_dog.js\n    ./app/controllers\n    ./app/controllers/snow_dogs.js\n    ./app/controllers/main.js\n    ./app/controllers/application.js\n    ./app/views\n    ./app/views/snow_dogs\n    ./app/views/snow_dogs/edit.html.ejs\n    ./app/views/snow_dogs/show.html.ejs\n    ./app/views/snow_dogs/index.html.ejs\n    ./app/views/snow_dogs/add.html.ejs\n    ./public\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  // (Fetch some item by params.id)\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is very similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nsys.puts(user.valid());\n// Prints 'Field \"password\" is required'\nsys.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.3.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"mde","email":"mde@fleegix.org"},"_id":"geddy@0.4.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"abe6dc3257071ed77ed507f925605b87cb27880f","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.4.tgz"},"scripts":{},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.3.x","utilities":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"## Geddy web framework for Node.js\n- - -\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.4.5","dist":{"shasum":"2fc00e7836cea685bea12a77dfd8a5dc2c5bc1b7","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.5.tgz"},"scripts":{},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.3.x","utilities":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"## Geddy web framework for Node.js\n- - -\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.4.6","dist":{"shasum":"c632df0e09a7610ca198d5bf45ce308cd417146a","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.6.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.4.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.4.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.3.x","utilities":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"## Geddy web framework for Node.js\n- - -\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.registerModel('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.4.7","dist":{"shasum":"49be212d4bf92ec103de3004efd378799cc2a793","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.4.7.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"## Geddy web framework for Node.js\n- - -\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.1","dist":{"shasum":"d5f9ed565ce274510ccd02ef73fd2fe87b0d77d7","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.1.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n## API Docs\n\nAPI docs [can be found here](http://mde.github.com/geddy/doc/).\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.2","dist":{"shasum":"0b7b6ae6cc4cde52b94a3f9c3ac17f685bb236e5","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.2.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.3","dist":{"shasum":"9a3938b83574f60a3c89052466370de7c8cbf420","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.3.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.4","dist":{"shasum":"452bbd5cc46eacdd0f63ea5cd3108329b25960cf","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.4.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.5","dist":{"shasum":"72010b68031d7c59fb1971036e50fc62146139db","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.5.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.6","dist":{"shasum":"5cc9eb2ee024ebee2a8f1d80c2ba50fd67a6fe8d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.6.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.5.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC"],"version":"0.5.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.5.7","dist":{"shasum":"7662f7fccf4a49db1e621f7a6d4bec9c9f2b800a","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.5.7.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.1","dist":{"shasum":"ebb0224606a9d35bcc9937a31949d26cf4da292b","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.1.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.2","dist":{"shasum":"aa89a3ebf78373b17c7092c7cfc3b5981d8d051d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.2.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.3","dist":{"shasum":"f6055c4f46688b7dbf124b947486b37b44e060f3","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.3.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.4","dist":{"shasum":"20fb159c7052edf2828ea41258aff07d11551903","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.4.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.5","dist":{"shasum":"ebcaeeea1951718e50ba687ed8689dc539836ef1","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.5.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.6","dist":{"shasum":"51db720ea22c30bc8f10e15341780633ae227166","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.6.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.7","dist":{"shasum":"b8e9d834670f26ac2159f31fc710d5a0f30b63d4","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.7.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.11":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.11","dist":{"shasum":"48b0a255d3269b23786f0803c8ceb739c0e13771","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.11.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.12":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.12","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","_id":"geddy@0.6.12","dist":{"shasum":"19affe61776c27dcf0193d817011626a62bb55b3","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.12.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.13":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.13","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.13","dist":{"shasum":"05604136fc3d8029841099dbe28ddd9df70f5613","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.13.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.14":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.14","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.14","dist":{"shasum":"deb3e8f86339b20b325984d042a63b8a652254fe","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.14.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.15":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.15","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.15","dist":{"shasum":"f2ba33ceaa46cf83dfff5006e9784910c0f21fc2","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.15.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.16":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.16","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.16","dist":{"shasum":"84c48e6549705a8d75e4136bfe206eedcbd30939","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.16.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.17":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.17","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.17","dist":{"shasum":"81657680a9dcd63801284242f0dd5d6a45c6fc87","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.17.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.18":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.18","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.18","dist":{"shasum":"9c46ccc34c452a8044cec5e660487ae7c1f11fa7","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.18.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.19":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.19","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.19","dist":{"shasum":"058e8ac326cdede1d7df9950ae86ad6e530bc138","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.19.tgz"},"_resolved":"pkg/geddy-v0.6.19.tar.gz","_from":"pkg/geddy-v0.6.19.tar.gz","_npmVersion":"1.2.11","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.6.20":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.6.20","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support(EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nResources do not generate views, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/) Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\nGeddy generators handle plural inflections for model and controller names. ex: 'person' to 'people'\nTo read about the model properties argument jump to [Model properties](#model-properties)\n\n### Model properties\n\nSome Geddy generators (resource, scaffold and model) have a argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type, if there's no type given it'll default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property, this way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations like this:\n\nGET */snow_dogs[.extension]<br/>\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]<br/>\n(SnowDogs controller, add action, for any new-resource template\n-- \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]<br/>\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]<br/>\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]<br/>\n(SnowDogs controller, remove action)\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename-extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models, with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` library, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.6.20","dist":{"shasum":"ab8b849fb92008a557ddf11e932381252cf159cb","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.6.20.tgz"},"_resolved":"pkg/geddy-v0.6.20.tar.gz","_from":"pkg/geddy-v0.6.20.tar.gz","_npmVersion":"1.2.11","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.7","dist":{"shasum":"b3627e06cd0230c521f4fce933b17aa7067d1f01","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.7.tgz"},"_resolved":"pkg/geddy-v0.7.7.tar.gz","_from":"pkg/geddy-v0.7.7.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.8":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.8","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.8","dist":{"shasum":"efd43d3f4fce64eed0abc10513d60f0f76ffa1fc","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.8.tgz"},"_resolved":"pkg/geddy-v0.7.8.tar.gz","_from":"pkg/geddy-v0.7.8.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.10":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.10","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.10","dist":{"shasum":"2b51494bab4e3592d8cafc322e9af971feda29cd","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.10.tgz"},"_resolved":"pkg/geddy-v0.7.10.tar.gz","_from":"pkg/geddy-v0.7.10.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.11":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.11","dist":{"shasum":"dce89375030770f1d35fbd8c1cf5e30ce83aad76","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.11.tgz"},"_resolved":"pkg/geddy-v0.7.11.tar.gz","_from":"pkg/geddy-v0.7.11.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.12":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.12","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.12","dist":{"shasum":"77f5e7f7bb9ded9275d879a30bf6a401f11f9d57","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.12.tgz"},"_resolved":"pkg/geddy-v0.7.12.tar.gz","_from":"pkg/geddy-v0.7.12.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.13":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.13","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.13","dist":{"shasum":"7f37aee60591096e8448423345d339d45f615c5c","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.13.tgz"},"_resolved":"pkg/geddy-v0.7.13.tar.gz","_from":"pkg/geddy-v0.7.13.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.14":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.14","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.14","dist":{"shasum":"3ce95b0e1952199b0f6e2a1871b6799b8cd6757d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.14.tgz"},"_resolved":"pkg/geddy-v0.7.14.tar.gz","_from":"pkg/geddy-v0.7.14.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.15":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.15","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.15","dist":{"shasum":"262a42fb4461dec77df9e564decb0be108a4eb96","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.15.tgz"},"_resolved":"pkg/geddy-v0.7.15.tar.gz","_from":"pkg/geddy-v0.7.15.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.16":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.16","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.16","dist":{"shasum":"1319daf22b2609ff3bb167b03edf8377c7137b5c","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.16.tgz"},"_resolved":"pkg/geddy-v0.7.16.tar.gz","_from":"pkg/geddy-v0.7.16.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.17":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.17","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.17","dist":{"shasum":"ee3e22f9cdf4c2a6be53d09f5e2572865fbcea83","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.17.tgz"},"_resolved":"pkg/geddy-v0.7.17.tar.gz","_from":"pkg/geddy-v0.7.17.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.18":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.18","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.18","dist":{"shasum":"21969155621a847c5a19b876211e8371aa0be703","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.18.tgz"},"_resolved":"pkg/geddy-v0.7.18.tar.gz","_from":"pkg/geddy-v0.7.18.tar.gz","_npmVersion":"1.2.14","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.19":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.19","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.19","dist":{"shasum":"91045f5ca80834aec718227194a3282755c36ad6","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.19.tgz"},"_resolved":"pkg/geddy-v0.7.19.tar.gz","_from":"pkg/geddy-v0.7.19.tar.gz","_npmVersion":"1.2.15","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.20":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.20","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.20","dist":{"shasum":"e1db38e7f6a69b66f049b689165dd3869bcff84f","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.20.tgz"},"_resolved":"pkg/geddy-v0.7.20.tar.gz","_from":"pkg/geddy-v0.7.20.tar.gz","_npmVersion":"1.2.17","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.21":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.21","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.21","dist":{"shasum":"12ae72ff25c6f0cd256c9b10fe1e29da5edc54d5","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.21.tgz"},"_resolved":"pkg/geddy-v0.7.21.tar.gz","_from":"pkg/geddy-v0.7.21.tar.gz","_npmVersion":"1.2.17","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.7.22":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.7.22","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.0.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.7.22","dist":{"shasum":"1aab35c71002ff45fbe72b0a5f51ead4260bbec2","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.7.22.tgz"},"_resolved":"pkg/geddy-v0.7.22.tar.gz","_from":"pkg/geddy-v0.7.22.tar.gz","_npmVersion":"1.2.17","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xandadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.1","dist":{"shasum":"9bf511d96c24cd383c4babc07bc5e8aafbe6e43f","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.1.tgz"},"_resolved":"pkg/geddy-v0.8.1.tar.gz","_from":"pkg/geddy-v0.8.1.tar.gz","_npmVersion":"1.2.17","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.2","dist":{"shasum":"dd297aae8a5625baa08f0f1e651c8e98c13b9b35","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.2.tgz"},"_resolved":"pkg/geddy-v0.8.2.tar.gz","_from":"pkg/geddy-v0.8.2.tar.gz","_npmVersion":"1.2.17","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.3","dist":{"shasum":"ee28b85aa84665b024704e9ebf50c1b2dd0d33cc","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.3.tgz"},"_resolved":"pkg/geddy-v0.8.3.tar.gz","_from":"pkg/geddy-v0.8.3.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.4","dist":{"shasum":"694c652c351b57cbe6d3109c8d22bbf81cd33d16","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.4.tgz"},"_resolved":"pkg/geddy-v0.8.4.tar.gz","_from":"pkg/geddy-v0.8.4.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.5","dist":{"shasum":"2dec6baae0d5d1dc9edf69acfa7b7522d17df0f4","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.5.tgz"},"_resolved":"pkg/geddy-v0.8.5.tar.gz","_from":"pkg/geddy-v0.8.5.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.6","dist":{"shasum":"f1c06b77df2eaf10aab4b761343ad6caf5d3190b","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.6.tgz"},"_resolved":"pkg/geddy-v0.8.6.tar.gz","_from":"pkg/geddy-v0.8.6.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.7","dist":{"shasum":"8c231d388a5c97534a4e9e068b6369bb1cdf453f","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.7.tgz"},"_resolved":"pkg/geddy-v0.8.7.tar.gz","_from":"pkg/geddy-v0.8.7.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.8":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.8","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.8","dist":{"shasum":"608c1bd2963c13118b540c31c82cd131424c530d","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.8.tgz"},"_resolved":"pkg/geddy-v0.8.8.tar.gz","_from":"pkg/geddy-v0.8.8.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.9":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.9","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.9","dist":{"shasum":"44016c66aad841dfd1a6379d9c3e1f58e9a329d6","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.9.tgz"},"_resolved":"pkg/geddy-v0.8.9.tar.gz","_from":"pkg/geddy-v0.8.9.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.10":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.10","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.10","dist":{"shasum":"5fc129cae193273217d3c1f09d566344147e64c7","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.10.tgz"},"_resolved":"pkg/geddy-v0.8.10.tar.gz","_from":"pkg/geddy-v0.8.10.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.11":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","_id":"geddy@0.8.11","dist":{"shasum":"18fd22077b9c02ab978b10b7e49b7cbe19f95218","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.11.tgz"},"_resolved":"pkg/geddy-v0.8.11.tar.gz","_from":"pkg/geddy-v0.8.11.tar.gz","_npmVersion":"1.2.18","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.12":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.12","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.8.12","dist":{"shasum":"d73bea3860d3827a3bb9091099239f33f1caef38","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.12.tgz"},"_resolved":"pkg/geddy-v0.8.12.tar.gz","_from":"pkg/geddy-v0.8.12.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.13":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.13","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.8.13","dist":{"shasum":"537ddf3f7c78bbe5023008d3cc5b119c4107dcad","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.13.tgz"},"_resolved":"pkg/geddy-v0.8.13.tar.gz","_from":"pkg/geddy-v0.8.13.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.8.14":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.8.14","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.1.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n\n[![build status](https://secure.travis-ci.org/mde/geddy.png)](http://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.6.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Installing from Github\n\nTo get Geddy from Github and install it do:\n\n```\ngit clone git@github.com:mde/geddy.git\ncd geddy\nmake && sudo make install\n```\n\nBy default Geddy is installed in \"/usr/local.\" To install it into a\ndifferent directory (e.g., one that doesn't require super-user\nprivilege), pass the PREFIX variable to the `make install` command.\nFor example, to install it into a \"geddy\" directory in your home\ndirectory, you could use this:\n\n```\nmake && make install PREFIX=~/geddy\n```\n\nIf you do install Geddy somewhere special, you'll need to add the\n\"bin\" directory in the install target to your PATH to get access\nto the `geddy` executable.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.8.14","dist":{"shasum":"11dbdc192870cfa6c997f8ddf68c2f58b198b26b","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.8.14.tgz"},"_resolved":"pkg/geddy-v0.8.14.tar.gz","_from":"pkg/geddy-v0.8.14.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.1","dist":{"shasum":"928a6db06acceac16cd89ebcda7a4545a40c1d99","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.1.tgz"},"_resolved":"pkg/geddy-v0.9.1.tar.gz","_from":"pkg/geddy-v0.9.1.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.2","dist":{"shasum":"7088250460060559ee046a1341dacf4e4632bce8","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.2.tgz"},"_resolved":"pkg/geddy-v0.9.2.tar.gz","_from":"pkg/geddy-v0.9.2.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.3","dist":{"shasum":"ec07d58a21ee53ea903f90a9d24b67a543895045","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.3.tgz"},"_resolved":"pkg/geddy-v0.9.3.tar.gz","_from":"pkg/geddy-v0.9.3.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.4","dist":{"shasum":"0891d87d916110fa27592816619cf1f8c7fc8fd1","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.4.tgz"},"_resolved":"pkg/geddy-v0.9.4.tar.gz","_from":"pkg/geddy-v0.9.4.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.5","dist":{"shasum":"5259512caf03dfe8aa76a900974e778126f45af2","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.5.tgz"},"_resolved":"pkg/geddy-v0.9.5.tar.gz","_from":"pkg/geddy-v0.9.5.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.6":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.6","dist":{"shasum":"422a7bf76e54b724643a56b64ae018b471f54007","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.6.tgz"},"_resolved":"pkg/geddy-v0.9.6.tar.gz","_from":"pkg/geddy-v0.9.6.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.7":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.7","dist":{"shasum":"2a92b8a8a89c6805110fee10585c98295963ec4f","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.7.tgz"},"_resolved":"pkg/geddy-v0.9.7.tar.gz","_from":"pkg/geddy-v0.9.7.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.8":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.8","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.8","dist":{"shasum":"3515a9eae859f460610c9fbe986965b735e857c7","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.8.tgz"},"_resolved":"pkg/geddy-v0.9.8.tar.gz","_from":"pkg/geddy-v0.9.8.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.9":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.9","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.9","dist":{"shasum":"b21331d24cae1da61a178a24a681377ac7311c62","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.9.tgz"},"_resolved":"pkg/geddy-v0.9.9.tar.gz","_from":"pkg/geddy-v0.9.9.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.10":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.10","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.10","dist":{"shasum":"d39358a0747f0e89da19c3ae8386f162bd5607e5","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.10.tgz"},"_resolved":"pkg/geddy-v0.9.10.tar.gz","_from":"pkg/geddy-v0.9.10.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.11":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.11","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.11","dist":{"shasum":"c2073759e6cf5afcc4ee435275c2ae5162b2a9bb","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.11.tgz"},"_resolved":"pkg/geddy-v0.9.11.tar.gz","_from":"pkg/geddy-v0.9.11.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.12":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.12","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.12","dist":{"shasum":"ea42bf78f80ce1f7fbb6b2b5000fb6e7f7981f59","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.12.tgz"},"_resolved":"pkg/geddy-v0.9.12.tar.gz","_from":"pkg/geddy-v0.9.12.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.13":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.13","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.13","dist":{"shasum":"10fdc0f36798ae5c86ada8b24342da204c41b996","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.13.tgz"},"_resolved":"pkg/geddy-v0.9.13.tar.gz","_from":"pkg/geddy-v0.9.13.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.14":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.14","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.14","dist":{"shasum":"e271118e8e4f5188e3e7181e9d626d54e6262a55","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.14.tgz"},"_resolved":"pkg/geddy-v0.9.14.tar.gz","_from":"pkg/geddy-v0.9.14.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.15":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.15","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.15","dist":{"shasum":"02da226aab0ea9f0cdfb48f083d9401008479915","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.15.tgz"},"_resolved":"pkg/geddy-v0.9.15.tar.gz","_from":"pkg/geddy-v0.9.15.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.16":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.16","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"0.14.x","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.16","dist":{"shasum":"e2c480727bfb5f3e6dc1da57edc63c9632eddf52","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.16.tgz"},"_resolved":"pkg/geddy-v0.9.16.tar.gz","_from":"pkg/geddy-v0.9.16.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.17":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.17","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"0.14.x","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.17","dist":{"shasum":"2c7f7d4cc05188a5f2026eb92889803b1270a5a8","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.17.tgz"},"_resolved":"pkg/geddy-v0.9.17.tar.gz","_from":"pkg/geddy-v0.9.17.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.9.18":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.9.18","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.5.x","utilities":"0.0.x","model":"0.2.x","barista":"0.0.x","socket.io":"0.9.x","mime":"1.2.x"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"0.14.x","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n####A simple, structured web framework for Node\n\n```\n$ npm install -g geddy\n$ geddy app my_app\n$ cd my_app\n$ geddy\n// app now running on localhost:4000\n```\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n### Documentation\n\nDocs are located on the GeddyJS website: http://geddyjs.org/documentation\n\n### Goals\n\n  * Easy to use\n  * Modular\n  * Fast\n\nGeddy should make things easy for the most basic applications,\nbut still let you get under the hood and tinker if you want.\n\n### Features\n\n  * Powerful, flexible router\n  * Easy resource-based routing\n  * Database adapters for Postgres, MongoDB, Riak, and in-memory\n  * App, resource and scaffold generators\n  * Content-negotiation\n  * Session support (in-memory, cookie)\n  * Multiple template engine support (EJS, Jade, Mustache, Handlebars, Swig)\n  * Real Time API generation (socket.io integration)\n  * View helpers ([Docs](https://github.com/mde/geddy/wiki/View-Helpers))\n  * Fully non-blocking\n\n### License\n\nApache License, Version 2\n\n### Prerequisites\n\nGeddy requires version 0.8.x of Node.js or higher, and the\n[Jake](https://github.com/mde/jake) JavaScript build-tool.\n\n### Installing with [NPM](http://npmjs.org/)\n\n```\n[sudo] npm -g install geddy\n```\n\nNote: Geddy (specifically, the generators) is a system-level\ntool, and wants to be installed globally.\n\n### Creating a Geddy application\n\nTo create Geddy applications simply run `geddy app <name>`.\nThen you can run `geddy` inside the application to start the server.\n\n```\nmde@localhost:~/work$ geddy app bytor\nCreated app bytor.\nmde@localhost:~/work$ cd bytor\nmde@localhost:~/work/bytor$ geddy\nServer running at http://127.0.0.1:4000/\n```\n\nGo to http://localhost:4000/, and you should see the introduction page.\n\n### Generating resources\n\nUse `geddy resource <name> [model properties]` to generate a resource in your application.\nA resources does not generate a view, but creates a view directory. A resource route will be\ncreated for you.\n\n````\nmde@localhost:~/work$ geddy resource snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] snow_dogs view directory\n```\n\nNow start your Geddy server and your new route will work. Trying this for example\nwill return the params for the index action in JSON:\n\n```\n$ curl localhost:4000/snow_dogs.json\n{\"params\":{\"method\":\"GET\",\"controller\":\"SnowDogs\",\"action\":\"index\",\"format\":\"json\"}}\n```\n\nGeddy generators handle plural inflections for model and controller names (e.g., \"person\" to \"people\").\nTo read about the model properties argument, see [Model properties](#model-properties).\n\n### Generating scaffolding\n\nUse `geddy scaffold <name> [model properties]` to generate scaffoling in your application.\nScaffolding creates full CRUD actions, includes views, and will default your configuration to use\n[Mongodb](http://www.mongodb.org/). Resource routes will be created for you.\n\n````\nmde@localhost:~/work$ geddy scaffold snow_dog breed:string name:string color:string\n[Added] app/models/snow_dog.js\n[Added] app/controllers/snow_dogs.js\n[Added] Resource snow_dogs route added to config/router.js\n[Added] View templates\n[Added] Database configuration to config/environment.js\n```\n\nNow start your Geddy server and you'll have new views created from scaffolding. Trying this for example\nwill return the content for the index action in HTML:\n\n```\n$ curl localhost:4000/snow_dogs\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Geddy App | This app uses Geddy.js</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <!-- The HTML5 shim, for IE6-8 support of HTML elements -->\n    <!--[if lt IE 9]>\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n\n.....\n```\n\n### Model properties\n\nSome Geddy generators (resource, scaffold, and model) have an argument that takes a list of model\nproperties. Here's an example of a resource with some properties:\n\n```\ngeddy resource user name admin:boolean lastLogin:datetime\n```\n\nEach of these items include a name and an optional type. If there's no type given, it will default\nto string. The list of supported types are listed in the [model](https://github.com/mde/geddy/wiki/Models) documentation.\nIf no id property is given, then a default id property will be created with the type of string.\n\nYou can also use custom default properties:\n```\ngeddy resource user name:default admin:boolean\n```\nThe above example will use the property `name`(string) to display the items in the views instead of the default ID property. This way when generating scaffolds, it will look better out of the box.\n\n### Routes\n\nGeddy uses the Barista router: https://github.com/kieran/barista\n\nRoutes are created in a similar fashion to Merb or Rails.\n\n***Basic routes***\n```\nrouter.match('/moving/pictures/:id').to(\n  {controller: 'Moving', action: 'pictures'});\n\nrouter.match('/farewells/:farewelltype/kings/:kingid').to(\n   {controller: 'Farewells', action: 'kings'});\n\n//Can also match specific HTTP methods only\nrouter.match('/xandadu', 'get').to(\n  {controller: 'Xanadu', action: 'specialHandler'});\n```\n\n***Resource routes***\n```\nrouter.resource('hemispheres');\n```\n\n### Resources and controllers\n\nGeddy's resource-based routes create url/request-method mappings\nfor easy CRUD operations:\n\n```\nGET */snow_dogs[.extension]\n(SnowDogs controller, index action)\n\nGET */snow_dogs/add[.extension]\n(SnowDogs controller, add action, for any new resource template; \"new\" is not usable as a JavaScript action name)\n\nPOST */snow_dogs[.extension]\n(SnowDogs controller, create action)\n\nGET */snow_dogs/:id[.extension]\n(SnowDogs controller, show action)\n\nGET */snow_dogs/:id/edit[.extension]\n(SnowDogs controller, edit action)\n\nPUT */snow_dogs/:id[.extension]\n(SnowDogs controller, update action)\n\nDELETE */snow_dogs/:id[.extension]\n(SnowDogs controller, remove action)\n```\n\nA simple controller that just responds with any\nform-post/query-string params looks like this:\n\n```javascript\nvar SnowDogs = function () {\n  this.respondsWith = ['text', 'json', 'html'];\n\n  this.index = function (params) {\n    this.respond({params: params});\n  };\n\n  this.add = function (params) {\n    this.respond({params: params});\n  };\n\n  this.create = function (params) {\n    this.respond({params: params});\n  };\n\n  this.show = function (params) {\n    this.respond({params: params});\n  };\n\n  this.update = function (params) {\n    this.respond({params: params});\n  };\n\n  this.remove = function (params) {\n    this.respond({params: params});\n  };\n\n};\n\nexports.SnowDogs = SnowDogs;\n```\n\n## Content-negotiation\n\nGeddy can perform content-negotiation, and respond with with the\ncorrect format based on the requested filename extension.\n\nIf you have a JSON-serializable JavaScript object you want to\nreturn in JSON format, pass your JavaScript object to the\n`respond` method in the action on that controller.\n\n```javascript\nthis.respondsWith = ['text', 'json'];\n\nthis.show = function (params) {\n  item = {foo: 'FOO', bar: 1, baz: false};\n  this.respond(item);\n};\n```\n## Models and validations\n\nGeddy has a simple way of defining models with a full-featured\nset of data validations. The syntax is similar to models in\nRuby's ActiveRecord or DataMapper.\n\nHere is an example of a model with some validations:\n\n```javascript\nvar User = function () {\n  this.property('login', 'string', {required: true});\n  this.property('password', 'string', {required: true});\n  this.property('lastName', 'string');\n  this.property('firstName', 'string');\n\n  this.validatesPresent('login');\n  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});\n  this.validatesLength('login', {min: 3});\n  this.validatesConfirmed('password', 'confirmPassword');\n  this.validatesWithFunction('password', function (s) {\n      // Something that returns true or false\n      return s.length > 0;\n  });\n\n  // Can define methods for instances like this\n  this.someMethod = function () {\n    // Do some stuff\n  };\n};\n\n// Can also define them on the prototype\nUser.prototype.someOtherMethod = function () {\n  // Do some other stuff\n};\n\nUser = geddy.model.register('User', User);\n```\n\nAlternatively, you can use the `defineProperties` method to lay out your model:\n\n```javascript\nvar User = function () {\n  this.defineProperties({\n    login: {type: 'string', required: true}\n  , password: {type: 'string', required: true}\n  , lastName: {type: 'string'}\n  , firstName: {type: 'string'}\n  });\n}\n```\n\nCreating an instance of one of these models is easy:\n\n```javascript\nvar params = {\n  login: 'alex'\n, password: 'lerxst'\n, lastName: 'Lifeson'\n, firstName: 'Alex'\n};\nvar user = User.create(params);\n```\n\nData-validation happens on the call to `create`, and any\nvalidation errors show up inside an `errors` property on\nthe instance, keyed by field name. Instances have a `valid`\nmethod that returns a Boolean indicating whether the instance\nis valid.\n\n```javascript\n// Leaving out the required password field\nvar params = {\n  login: 'alex'\n};\nvar user = User.create(params);\n\n// Prints 'false'\nutil.puts(user.valid());\n// Prints 'Field \"password\" is required'\nutil.puts(user.errors.password);\n```\n\n## Running the tests\n\nIn the geddy project directory, run `jake test`. The tests simply\nuse NodeJS's `assert` module, which throws an error on failure.\nIf there are no errors, the tests all ran successfully.\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.9.18","dist":{"shasum":"71bd5a31b0c71107600fc0a9bd991c233d7aa7aa","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.9.18.tgz"},"_resolved":"pkg/geddy-v0.9.18.tar.gz","_from":"pkg/geddy-v0.9.18.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.10.1":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.10.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.6.x","utilities":"0.0.x","model":"0.3.x","barista":"0.1.x","socket.io":"0.9.x","mime":"1.2.x","tlsopts":"0.0.1"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test --trace"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"0.14.x","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n#### A simple, structured web framework for Node\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n#### Install Geddy:\n\n```\n$ npm install -g geddy\n```\n\n#### Create an app, start it up:\n\n```\n$ geddy gen app my_app\n$ cd my_app\n$ geddy\nCreating 1 worker process.\nServer worker running in development on port 4000\n```\n\n#### Create a CRUD resource\n\n```\n$ geddy gen scaffold foobar baz:string qux:int\n[Added] app/models/foobar.js\n[Added] db/migrations/20130809201124_create_foobars.js\n[Added] test/models/foobar.js\n[Added] test/controllers/foobars.js\n[Added] app/controllers/foobars.js\n[Added] Resource foobars route added to config/router.js\n[Added] View templates\n```\n\n#### Documentation\n\nDocs are on the GeddyJS Website: http://geddyjs.org/documentation\n\n#### Community\n\n* Mailing list: [https://groups.google.com/group/geddyjs](https://groups.google.com/group/geddyjs)\n* IRC: #geddy on Freenode\n\n#### License\n\nApache License, Version 2\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.10.1","dist":{"shasum":"cfb1018e65757be43063458d5ee12e058b2a9f31","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.10.1.tgz"},"_resolved":"pkg/geddy-v0.10.1.tar.gz","_from":"pkg/geddy-v0.10.1.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.10.2":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.10.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.7.x","utilities":"0.0.x","model":"0.3.x","barista":"0.1.x","socket.io":"0.9.x","mime":"1.2.x","tlsopts":"0.0.1"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test --trace"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n#### A simple, structured web framework for Node\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n#### Install Geddy:\n\n```\n$ npm install -g geddy\n```\n\n#### Create an app, start it up:\n\n```\n$ geddy gen app my_app\n$ cd my_app\n$ geddy\nCreating 1 worker process.\nServer worker running in development on port 4000\n```\n\n#### Create a CRUD resource\n\n```\n$ geddy gen scaffold foobar baz:string qux:int\n[Added] app/models/foobar.js\n[Added] db/migrations/20130809201124_create_foobars.js\n[Added] test/models/foobar.js\n[Added] test/controllers/foobars.js\n[Added] app/controllers/foobars.js\n[Added] Resource foobars route added to config/router.js\n[Added] View templates\n```\n\n#### Documentation\n\nDocs are on the GeddyJS Website: http://geddyjs.org/documentation\n\n#### Community\n\n* Mailing list: [https://groups.google.com/group/geddyjs](https://groups.google.com/group/geddyjs)\n* IRC: #geddy on Freenode\n\n#### License\n\nApache License, Version 2\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.10.2","dist":{"shasum":"d905f4e5a4d840b3c551df971b0f0c3d177d9066","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.10.2.tgz"},"_resolved":"pkg/geddy-v0.10.2.tar.gz","_from":"pkg/geddy-v0.10.2.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.10.3":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.10.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.7.x","utilities":"0.0.x","model":"0.3.x","barista":"0.1.x","socket.io":"0.9.x","mime":"1.2.x","tlsopts":"0.0.1"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test --trace"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n#### A simple, structured web framework for Node\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n#### Install Geddy:\n\n```\n$ npm install -g geddy\n```\n\n#### Create an app, start it up:\n\n```\n$ geddy gen app my_app\n$ cd my_app\n$ geddy\nCreating 1 worker process.\nServer worker running in development on port 4000\n```\n\n#### Create a CRUD resource\n\n```\n$ geddy gen scaffold foobar baz:string qux:int\n[Added] app/models/foobar.js\n[Added] db/migrations/20130809201124_create_foobars.js\n[Added] test/models/foobar.js\n[Added] test/controllers/foobars.js\n[Added] app/controllers/foobars.js\n[Added] Resource foobars route added to config/router.js\n[Added] View templates\n```\n\n#### Documentation\n\nDocs are on the GeddyJS Website: http://geddyjs.org/documentation\n\n#### Community\n\n* Mailing list: [https://groups.google.com/group/geddyjs](https://groups.google.com/group/geddyjs)\n* IRC: #geddy on Freenode\n\n#### License\n\nApache License, Version 2\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.10.3","dist":{"shasum":"56d6cd414eb7f2b0958906e575b6d75116d09176","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.10.3.tgz"},"_resolved":"pkg/geddy-v0.10.3.tar.gz","_from":"pkg/geddy-v0.10.3.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.10.4":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.10.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.7.x","utilities":"0.0.x","model":"0.3.x","barista":"0.1.x","socket.io":"0.9.x","mime":"1.2.x","tlsopts":"0.0.1"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test --trace"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n#### A simple, structured web framework for Node\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n#### Install Geddy:\n\n```\n$ npm install -g geddy\n```\n\n#### Create an app, start it up:\n\n```\n$ geddy gen app my_app\n$ cd my_app\n$ geddy\nCreating 1 worker process.\nServer worker running in development on port 4000\n```\n\n#### Create a CRUD resource\n\n```\n$ geddy gen scaffold foobar baz:string qux:int\n[Added] app/models/foobar.js\n[Added] db/migrations/20130809201124_create_foobars.js\n[Added] test/models/foobar.js\n[Added] test/controllers/foobars.js\n[Added] app/controllers/foobars.js\n[Added] Resource foobars route added to config/router.js\n[Added] View templates\n```\n\n#### Documentation\n\nDocs are on the GeddyJS Website: http://geddyjs.org/documentation\n\n#### Community\n\n* Mailing list: [https://groups.google.com/group/geddyjs](https://groups.google.com/group/geddyjs)\n* IRC: #geddy on Freenode\n\n#### License\n\nApache License, Version 2\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.10.4","dist":{"shasum":"25bdec0fbe42ba07fa6c50308cece95261dd528a","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.10.4.tgz"},"_resolved":"pkg/geddy-v0.10.4.tar.gz","_from":"pkg/geddy-v0.10.4.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}},"0.10.5":{"name":"geddy","description":"Web framework for Node.js","keywords":["Web","framework","REST","MVC","realtime"],"version":"0.10.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"dependencies":{"jake":"0.7.x","utilities":"0.0.x","model":"0.3.x","barista":"0.1.x","socket.io":"0.9.x","mime":"1.2.x","tlsopts":"0.0.1"},"bin":{"geddy":"./bin/cli.js"},"scripts":{"test":"jake test --trace"},"main":"./lib/geddy","repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"preferGlobal":true,"devDependencies":{"browserify":"1.16.x","socket.io-client":"0.9.x","handlebars":"latest","jade":"latest","swig":"latest","ejs":"latest","request":"latest"},"engines":{"node":"*"},"readme":"# Geddy\n#### A simple, structured web framework for Node\n\n[![Build Status](https://travis-ci.org/mde/geddy.png?branch=master)](https://travis-ci.org/mde/geddy)\n\n#### Install Geddy:\n\n```\n$ npm install -g geddy\n```\n\n#### Create an app, start it up:\n\n```\n$ geddy gen app my_app\n$ cd my_app\n$ geddy\nCreating 1 worker process.\nServer worker running in development on port 4000\n```\n\n#### Create a CRUD resource\n\n```\n$ geddy gen scaffold foobar baz:string qux:int\n[Added] app/models/foobar.js\n[Added] db/migrations/20130809201124_create_foobars.js\n[Added] test/models/foobar.js\n[Added] test/controllers/foobars.js\n[Added] app/controllers/foobars.js\n[Added] Resource foobars route added to config/router.js\n[Added] View templates\n```\n\n#### Documentation\n\nDocs are on the GeddyJS Website: http://geddyjs.org/documentation\n\n#### Community\n\n* Mailing list: [https://groups.google.com/group/geddyjs](https://groups.google.com/group/geddyjs)\n* IRC: #geddy on Freenode\n\n#### License\n\nApache License, Version 2\n\n- - -\nGeddy Web-app development framework copyright 2112\nmde@fleegix.org.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mde/geddy/issues"},"_id":"geddy@0.10.5","dist":{"shasum":"9a89c2a477adf1a68262f68aa032e6511aebb688","tarball":"http://registry.npmjs.org/geddy/-/geddy-0.10.5.tgz"},"_resolved":"pkg/geddy-v0.10.5.tar.gz","_from":"pkg/geddy-v0.10.5.tar.gz","_npmVersion":"1.2.32","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"directories":{}}},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"time":{"0.1.1":"2011-03-31T07:58:23.640Z","0.1.3":"2011-03-31T07:58:23.640Z","0.2.0":"2011-11-25T00:18:31.999Z","0.2.1":"2011-12-02T00:39:14.960Z","0.2.2":"2011-12-14T05:03:36.385Z","0.2.3":"2011-12-28T22:45:54.330Z","0.2.4":"2012-01-03T22:10:43.951Z","0.2.5":"2012-01-06T02:32:37.573Z","0.2.6":"2012-01-11T22:30:11.967Z","0.2.7":"2012-01-18T00:17:44.693Z","0.2.8":"2012-01-21T02:41:58.529Z","0.2.9":"2012-01-26T20:18:39.470Z","0.2.10":"2012-01-27T23:26:39.808Z","0.2.11":"2012-01-30T22:55:03.111Z","0.3.1":"2012-02-08T02:38:55.732Z","0.3.2":"2012-02-08T04:13:51.671Z","0.3.3":"2012-02-09T20:30:39.694Z","0.3.4":"2012-02-12T06:13:48.533Z","0.3.6":"2012-02-15T04:48:30.705Z","0.3.7":"2012-03-01T21:02:05.474Z","0.3.9":"2012-03-02T06:14:32.442Z","0.3.10":"2012-03-02T06:40:07.238Z","0.3.11":"2012-03-03T03:23:37.246Z","0.3.12":"2012-03-04T05:36:07.824Z","0.3.13":"2012-03-04T05:51:46.523Z","0.3.14":"2012-03-05T01:57:19.430Z","0.3.15":"2012-03-05T15:41:00.521Z","0.3.16":"2012-03-06T22:58:23.608Z","0.3.18":"2012-03-12T04:56:12.479Z","0.3.19":"2012-03-25T16:43:59.986Z","0.3.20":"2012-03-25T17:13:04.198Z","0.3.21":"2012-04-03T18:47:39.143Z","0.4.1":"2012-05-02T00:04:15.585Z","0.4.2":"2012-06-03T17:59:47.758Z","0.4.3":"2012-06-28T22:38:21.057Z","0.4.4":"2012-07-29T18:39:54.837Z","0.4.5":"2012-08-25T17:25:28.796Z","0.4.6":"2012-09-15T05:42:53.773Z","0.4.7":"2012-09-18T19:44:51.943Z","0.5.1":"2012-10-11T23:22:25.960Z","0.5.2":"2012-10-13T14:26:07.587Z","0.5.3":"2012-10-18T23:00:41.621Z","0.5.4":"2012-10-22T23:09:10.723Z","0.5.5":"2012-10-23T04:01:41.443Z","0.5.6":"2012-10-30T02:48:12.489Z","0.5.7":"2012-10-30T20:13:33.022Z","0.6.1":"2012-11-06T05:32:45.818Z","0.6.2":"2012-11-06T06:07:27.613Z","0.6.3":"2012-11-08T18:13:00.175Z","0.6.4":"2012-11-09T19:12:19.088Z","0.6.5":"2012-11-10T06:16:16.996Z","0.6.6":"2012-11-10T08:11:57.616Z","0.6.7":"2012-11-10T09:03:38.116Z","0.6.11":"2012-11-11T05:27:32.364Z","0.6.12":"2012-11-14T23:49:06.638Z","0.6.13":"2012-11-19T23:02:27.715Z","0.6.14":"2012-11-20T21:24:00.794Z","0.6.15":"2012-11-29T20:18:39.655Z","0.6.16":"2012-11-29T20:55:15.496Z","0.6.17":"2012-11-29T21:56:51.464Z","0.6.18":"2012-11-30T21:20:12.385Z","0.6.19":"2013-02-17T04:26:27.818Z","0.6.20":"2013-02-24T22:15:27.868Z","0.7.7":"2013-03-12T19:20:16.503Z","0.7.8":"2013-03-14T20:34:00.218Z","0.7.10":"2013-03-15T03:30:53.182Z","0.7.11":"2013-03-15T21:00:10.733Z","0.7.12":"2013-03-17T20:25:28.023Z","0.7.13":"2013-03-18T05:52:20.775Z","0.7.14":"2013-03-20T19:11:54.772Z","0.7.15":"2013-03-21T20:23:35.060Z","0.7.16":"2013-03-22T05:24:32.469Z","0.7.17":"2013-03-22T20:24:46.463Z","0.7.18":"2013-03-25T20:00:49.232Z","0.7.19":"2013-03-30T18:19:31.844Z","0.7.20":"2013-04-11T23:35:37.768Z","0.7.21":"2013-04-13T00:27:37.149Z","0.7.22":"2013-04-22T03:44:35.652Z","0.8.1":"2013-04-25T17:51:52.738Z","0.8.2":"2013-04-30T04:28:39.952Z","0.8.3":"2013-04-30T20:34:20.911Z","0.8.4":"2013-05-05T02:36:10.544Z","0.8.5":"2013-05-18T05:04:58.843Z","0.8.6":"2013-05-22T04:52:19.865Z","0.8.7":"2013-05-31T00:58:22.794Z","0.8.8":"2013-06-06T23:12:05.420Z","0.8.9":"2013-06-11T19:51:38.046Z","0.8.10":"2013-06-14T01:13:36.863Z","0.8.11":"2013-06-23T19:41:50.401Z","0.8.12":"2013-06-29T20:44:37.098Z","0.8.13":"2013-06-29T23:10:25.998Z","0.8.14":"2013-07-05T20:59:47.607Z","0.9.1":"2013-07-09T05:54:19.808Z","0.9.2":"2013-07-10T21:26:26.787Z","0.9.3":"2013-07-10T22:26:15.869Z","0.9.4":"2013-07-13T00:54:26.412Z","0.9.5":"2013-07-13T01:46:41.312Z","0.9.6":"2013-07-13T02:35:17.514Z","0.9.7":"2013-07-15T18:42:25.896Z","0.9.8":"2013-07-17T19:04:35.085Z","0.9.9":"2013-07-18T22:33:40.323Z","0.9.10":"2013-07-23T20:12:55.405Z","0.9.11":"2013-07-30T03:36:24.965Z","0.9.12":"2013-07-30T03:58:47.692Z","0.9.13":"2013-08-05T21:13:25.630Z","0.9.14":"2013-08-12T23:44:56.586Z","0.9.15":"2013-08-16T21:12:55.924Z","0.9.16":"2013-08-26T18:14:46.996Z","0.9.17":"2013-08-27T21:33:44.882Z","0.9.18":"2013-09-07T19:11:28.859Z","0.10.1":"2013-09-17T03:50:58.872Z","0.10.2":"2013-10-04T18:21:31.679Z","0.10.3":"2013-10-06T05:14:58.096Z","0.10.4":"2013-10-22T23:14:01.467Z","0.10.5":"2013-10-22T23:34:15.231Z"},"repository":{"type":"git","url":"git://github.com/mde/geddy.git"},"description":"Web framework for Node.js","users":{"fgribreau":true,"werle":true,"benng":true},"_attachments":{"geddy-0.10.5.tgz":{"content_type":"application/octet-stream","revpos":242,"digest":"md5-VH6TDL4HYer5EO2Qx1o7Lw==","length":394993,"stub":true},"geddy-0.10.4.tgz":{"content_type":"application/octet-stream","revpos":240,"digest":"md5-/s/v5/7snOC8X9oSWkbNTw==","length":395010,"stub":true},"geddy-0.10.3.tgz":{"content_type":"application/octet-stream","revpos":238,"digest":"md5-YUy7Vn52cZ30nljQS0Q/DQ==","length":394881,"stub":true},"geddy-0.10.2.tgz":{"content_type":"application/octet-stream","revpos":236,"digest":"md5-AE10RnznMkcfn5b7cgP21A==","length":394851,"stub":true},"geddy-0.10.1.tgz":{"content_type":"application/octet-stream","revpos":234,"digest":"md5-vbN6rjH+yeM2Ywx+fmkMaQ==","length":394771,"stub":true},"geddy-0.9.18.tgz":{"content_type":"application/octet-stream","revpos":232,"digest":"md5-VPFxaEv0zLdEvMy3g9LEIg==","length":388269,"stub":true},"geddy-0.9.17.tgz":{"content_type":"application/octet-stream","revpos":230,"digest":"md5-FA06EaxGRbjGmGOX9++vuQ==","length":388249,"stub":true},"geddy-0.9.16.tgz":{"content_type":"application/octet-stream","revpos":228,"digest":"md5-0Qmld4bEDUvbUvlnUShyEA==","length":388112,"stub":true},"geddy-0.9.15.tgz":{"content_type":"application/octet-stream","revpos":226,"digest":"md5-FIxvNWL/lh/SlUIpTWGV5A==","length":388078,"stub":true},"geddy-0.9.14.tgz":{"content_type":"application/octet-stream","revpos":224,"digest":"md5-ZUYYjM2QUoOXYfRxADzvZg==","length":388077,"stub":true},"geddy-0.9.13.tgz":{"content_type":"application/octet-stream","revpos":222,"digest":"md5-Mr0k+GclbR8IkJEj+sD+KQ==","length":387985,"stub":true},"geddy-0.9.12.tgz":{"content_type":"application/octet-stream","revpos":220,"digest":"md5-em1LQxxnW40vSpCOykBd9w==","length":387990,"stub":true},"geddy-0.9.11.tgz":{"content_type":"application/octet-stream","revpos":218,"digest":"md5-7aEl7HYWmqqziy8nSahbcA==","length":387985,"stub":true},"geddy-0.9.10.tgz":{"content_type":"application/octet-stream","revpos":216,"digest":"md5-spbisW131nxTS08l4IaURg==","length":388023,"stub":true},"geddy-0.9.9.tgz":{"content_type":"application/octet-stream","revpos":214,"digest":"md5-YiRgiW/4adRyHpkS+pnIPA==","length":387895,"stub":true},"geddy-0.9.8.tgz":{"content_type":"application/octet-stream","revpos":212,"digest":"md5-GZnKfOONZzPeiETzUdKJ0g==","length":387897,"stub":true},"geddy-0.9.7.tgz":{"content_type":"application/octet-stream","revpos":210,"digest":"md5-dxjye6MemsNl+aFYySPMUg==","length":387904,"stub":true},"geddy-0.9.6.tgz":{"content_type":"application/octet-stream","revpos":208,"digest":"md5-E3X1CuFVga+4H+EJZXM61Q==","length":377073,"stub":true},"geddy-0.9.5.tgz":{"content_type":"application/octet-stream","revpos":206,"digest":"md5-9Tr52bTGmkNMP82/GikSpA==","length":377073,"stub":true},"geddy-0.9.4.tgz":{"content_type":"application/octet-stream","revpos":204,"digest":"md5-fi/oF0/79eGeMzkh2ATrCg==","length":377077,"stub":true},"geddy-0.9.3.tgz":{"content_type":"application/octet-stream","revpos":202,"digest":"md5-iRDB6H3mJyPUZzlhSPwgmQ==","length":376904,"stub":true},"geddy-0.9.2.tgz":{"content_type":"application/octet-stream","revpos":200,"digest":"md5-AEzKmY19tIiLSe39YH1Gsw==","length":376618,"stub":true},"geddy-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":197,"digest":"md5-GNumlez/XKTVNZ1WNZr0vQ==","length":386088,"stub":true},"geddy-0.8.14.tgz":{"content_type":"application/octet-stream","revpos":195,"digest":"md5-Xl+VMWK+kF2MYrTITLLXhQ==","length":375804,"stub":true},"geddy-0.8.13.tgz":{"content_type":"application/octet-stream","revpos":193,"digest":"md5-28IXJsOBnJfDybMwgPyxOQ==","length":375601,"stub":true},"geddy-0.8.12.tgz":{"content_type":"application/octet-stream","revpos":191,"digest":"md5-U6QzlinHM/cwtDxtQP3ffA==","length":375588,"stub":true},"geddy-0.8.11.tgz":{"content_type":"application/octet-stream","revpos":189,"digest":"md5-EJfUElPoE3UGiNghguxl4Q==","length":375582,"stub":true},"geddy-0.8.10.tgz":{"content_type":"application/octet-stream","revpos":187,"digest":"md5-gXkObz32+iRAqma7DdakXQ==","length":375560,"stub":true},"geddy-0.8.9.tgz":{"content_type":"application/octet-stream","revpos":185,"digest":"md5-p9I/N1kFI9BSXwWjVJq1gQ==","length":375571,"stub":true},"geddy-0.8.8.tgz":{"content_type":"application/octet-stream","revpos":183,"digest":"md5-/l9YqS0fzqMrWoyMvFHXPQ==","length":375609,"stub":true},"geddy-0.8.7.tgz":{"content_type":"application/octet-stream","revpos":181,"digest":"md5-nVUqdsSDpRdyPTbleRfAKA==","length":375484,"stub":true},"geddy-0.8.6.tgz":{"content_type":"application/octet-stream","revpos":179,"digest":"md5-qOvh/diq+AhyJhUStIpVgw==","length":375478,"stub":true},"geddy-0.8.5.tgz":{"content_type":"application/octet-stream","revpos":177,"digest":"md5-kwcaA/81bsvubBzMop53OQ==","length":375488,"stub":true},"geddy-0.8.4.tgz":{"content_type":"application/octet-stream","revpos":175,"digest":"md5-dRwp58cgdPyu1vjjnF5aDQ==","length":375438,"stub":true},"geddy-0.8.3.tgz":{"content_type":"application/octet-stream","revpos":173,"digest":"md5-VomI6T3MP7dN6IIP7oFkRQ==","length":375435,"stub":true},"geddy-0.8.2.tgz":{"content_type":"application/octet-stream","revpos":171,"digest":"md5-N3IDqNhhVfHOJoDcn/ZCeg==","length":375428,"stub":true},"geddy-0.8.1.tgz":{"content_type":"application/octet-stream","revpos":169,"digest":"md5-XneJd+rhWwvh/f4jjVinAg==","length":376439,"stub":true},"geddy-0.7.22.tgz":{"content_type":"application/octet-stream","revpos":167,"digest":"md5-uqOhN3vdz2SwB63tFd+EgA==","length":374681,"stub":true},"geddy-0.7.21.tgz":{"content_type":"application/octet-stream","revpos":165,"digest":"md5-Kwdp8zafw1M1OZ7RSacA/Q==","length":374668,"stub":true},"geddy-0.7.20.tgz":{"content_type":"application/octet-stream","revpos":163,"digest":"md5-kA/M0UkMB/4HEkaS2cgO4w==","length":374598,"stub":true},"geddy-0.7.19.tgz":{"content_type":"application/octet-stream","revpos":161,"digest":"md5-fc5b03Xyg5Etm1lwKJm48Q==","length":374557,"stub":true},"geddy-0.7.18.tgz":{"content_type":"application/octet-stream","revpos":159,"digest":"md5-2ZJvxS7qSZNH2nGdeMbGOA==","length":374304,"stub":true},"geddy-0.7.17.tgz":{"content_type":"application/octet-stream","revpos":157,"digest":"md5-ni43jIjkf6/cVeWpgZ+eEQ==","length":383640,"stub":true},"geddy-0.7.16.tgz":{"content_type":"application/octet-stream","revpos":155,"digest":"md5-Z6wEz5Jv0G0WVoGC6lmwpQ==","length":383687,"stub":true},"geddy-0.7.15.tgz":{"content_type":"application/octet-stream","revpos":153,"digest":"md5-nnL9tK8RJye4j/0NRQ8XfA==","length":383687,"stub":true},"geddy-0.7.14.tgz":{"content_type":"application/octet-stream","revpos":151,"digest":"md5-t8x79U++UJ/HY4psrR2DIw==","length":383576,"stub":true},"geddy-0.7.13.tgz":{"content_type":"application/octet-stream","revpos":149,"digest":"md5-BHIJFn/tvNbZ0b23K73NrA==","length":383578,"stub":true},"geddy-0.7.12.tgz":{"content_type":"application/octet-stream","revpos":147,"digest":"md5-gux7DHo8B9AQvY3VxCW8oQ==","length":383586,"stub":true},"geddy-0.7.11.tgz":{"content_type":"application/octet-stream","revpos":145,"digest":"md5-WqYhi4goCK1Xt7sn6iljrA==","length":383540,"stub":true},"geddy-0.7.10.tgz":{"content_type":"application/octet-stream","revpos":143,"digest":"md5-uApXzAZvHmKvZdoPRh8VZA==","length":383524,"stub":true},"geddy-0.7.8.tgz":{"content_type":"application/octet-stream","revpos":141,"digest":"md5-gabQEHNQMZDC+bQqgUUXBg==","length":383073,"stub":true},"geddy-0.7.7.tgz":{"content_type":"application/octet-stream","revpos":139,"digest":"md5-657cZzv+HL1WyIDyUcaxsA==","length":383193,"stub":true},"geddy-0.6.20.tgz":{"content_type":"application/octet-stream","revpos":138,"digest":"md5-58mhykq6NrNb4mpvSvSt3g==","length":381891,"stub":true},"geddy-0.6.19.tgz":{"content_type":"application/octet-stream","revpos":135,"digest":"md5-N35Ab2KEk1fjoqwvrAJA2Q==","length":381898,"stub":true},"geddy-0.6.18.tgz":{"content_type":"application/octet-stream","revpos":132,"digest":"md5-XVnN/P5IkpOomlYYq5AW2w==","length":382099,"stub":true},"geddy-0.6.17.tgz":{"content_type":"application/octet-stream","revpos":130,"digest":"md5-AmYeIHjvb8AzwOqyFNWzuQ==","length":382015,"stub":true},"geddy-0.6.16.tgz":{"content_type":"application/octet-stream","revpos":128,"digest":"md5-SJXqodIZTzcD6NYcYZTR1Q==","length":382006,"stub":true},"geddy-0.6.15.tgz":{"content_type":"application/octet-stream","revpos":126,"digest":"md5-9mojlYt6Rq4fgJxEroswtw==","length":382005,"stub":true},"geddy-0.6.14.tgz":{"content_type":"application/octet-stream","revpos":124,"digest":"md5-lNIN2arncxz2WyD9NVZ4JA==","length":382017,"stub":true},"geddy-0.6.13.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-nLy3o66a0eIk+1U+aBt2HQ==","length":382022,"stub":true},"geddy-0.6.12.tgz":{"content_type":"application/octet-stream","revpos":120,"digest":"md5-3m9QcsmMR3YsLmjPh0JAGg==","length":382061,"stub":true},"geddy-0.6.11.tgz":{"content_type":"application/octet-stream","revpos":118,"digest":"md5-M/nlRplheCTX2p4OPEDbYg==","length":382043,"stub":true},"geddy-0.6.7.tgz":{"content_type":"application/octet-stream","revpos":116,"digest":"md5-nKXPQYazQJ+bMAquAznuqQ==","length":382105,"stub":true},"geddy-0.6.6.tgz":{"content_type":"application/octet-stream","revpos":114,"digest":"md5-rwobWqIposzNlgpXRPNXkg==","length":382093,"stub":true},"geddy-0.6.5.tgz":{"content_type":"application/octet-stream","revpos":112,"digest":"md5-3KDSILLZKq37xSZ7dKbaMQ==","length":381960,"stub":true},"geddy-0.6.4.tgz":{"content_type":"application/octet-stream","revpos":110,"digest":"md5-WLdEXhvlhYpMa5jZA36u7Q==","length":381938,"stub":true},"geddy-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":108,"digest":"md5-oUHCOYV3HdC77a6Dq0QF6A==","length":381953,"stub":true},"geddy-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":106,"digest":"md5-QR3bguKd1t9pWEToFJw5zQ==","length":381867,"stub":true},"geddy-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":104,"digest":"md5-eNLEZUZu5GaXX5Sn/yCN3Q==","length":381820,"stub":true},"geddy-0.5.7.tgz":{"content_type":"application/octet-stream","revpos":102,"digest":"md5-l4RrgydCAY+78H3hW4nWIw==","length":289618,"stub":true},"geddy-0.5.6.tgz":{"content_type":"application/octet-stream","revpos":100,"digest":"md5-vGfEf1nxP20buDT2RWlCJw==","length":289679,"stub":true},"geddy-0.5.5.tgz":{"content_type":"application/octet-stream","revpos":98,"digest":"md5-yz7i616WWZmxmhUMuAWIFg==","length":294207,"stub":true},"geddy-0.5.4.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-xkYYXkBwaSFP06T0ieTB/Q==","length":294216,"stub":true},"geddy-0.5.3.tgz":{"content_type":"application/octet-stream","revpos":94,"digest":"md5-bKKmBcVVuMQvR51/xZT7Yw==","length":298497,"stub":true},"geddy-0.5.2.tgz":{"content_type":"application/octet-stream","revpos":92,"digest":"md5-m6WSn70dgJkR5BB0Z1GgSA==","length":298143,"stub":true},"geddy-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":90,"digest":"md5-mL0GB6Z2h/xNYaKweemXIA==","length":298034,"stub":true},"geddy-0.4.7.tgz":{"content_type":"application/octet-stream","revpos":88,"digest":"md5-MhGBV+UeGzGn1xFMVrFcqQ==","length":277410,"stub":true},"geddy-0.4.6.tgz":{"content_type":"application/octet-stream","revpos":86,"digest":"md5-Ep43XAEsJ3dNUwGYCNk98g==","length":277365,"stub":true},"geddy-0.4.5.tgz":{"content_type":"application/octet-stream","revpos":84,"digest":"md5-wJNAKe2AggftlEjm6ev+yg==","length":264657,"stub":true},"geddy-0.4.4.tgz":{"content_type":"application/octet-stream","revpos":81,"digest":"md5-XZndWq4AgYi0XPPa9hpK6g==","length":286083,"stub":true},"geddy-0.4.3.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-QzpAbN68dzT+hjkThMXFDg==","length":262494,"stub":true},"geddy-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":77,"digest":"md5-ciTebP5CMRx8N+z0zxzPvg==","length":260569,"stub":true},"geddy-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":75,"digest":"md5-ZZHdCC0G4qYPQYDYM5GzxQ==","length":260732,"stub":true},"geddy-0.3.21.tgz":{"content_type":"application/octet-stream","revpos":73,"digest":"md5-9CzveWZheBf4rzUhDae7fQ==","length":258764,"stub":true},"geddy-0.3.20.tgz":{"content_type":"application/octet-stream","revpos":71,"digest":"md5-TD02lovElzr2bCz4lG6Icw==","length":258270,"stub":true},"geddy-0.3.19.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-pYnhr28NBd2Q1N3+5ssWow==","length":258193,"stub":true},"geddy-0.3.18.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-ptCVnjiSbU8Ywa4oJ79tCg==","length":257695,"stub":true},"geddy-0.3.16.tgz":{"content_type":"application/octet-stream","revpos":65,"digest":"md5-KQNl6r2gtero963lKmX5jQ==","length":250766,"stub":true},"geddy-0.3.15.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-/DVOpYhjeAtKKO552sHYdQ==","length":250758,"stub":true},"geddy-0.3.14.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-fOaT8mPS8nyvd9Lbi5JKVw==","length":250757,"stub":true},"geddy-0.3.13.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-0p8q4CgRBbYF7Q3SdnheVg==","length":250757,"stub":true},"geddy-0.3.12.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-ASxwcfQ+FNDwDaI7Nu412A==","length":250753,"stub":true},"geddy-0.3.11.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-thd20d7iH8Xq4MF/TTgTxw==","length":250357,"stub":true},"geddy-0.3.10.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-oFbtITjn7wTNoFgYin8UBw==","length":249480,"stub":true},"geddy-0.3.9.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-UD10VjWVpIiF88DVo4NlgQ==","length":249445,"stub":true},"geddy-0.3.7.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-DdGAAM9WZnVGEMCbwvHXKA==","length":249366,"stub":true},"geddy-0.3.6.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-3XVjZ6Xh1hCZm51lWPdiQA==","length":247208,"stub":true},"geddy-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-Wz80rLZxlsMpwzyaIqQBhg==","length":246435,"stub":true},"geddy-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-AOfMCMkyC0f3jeOhj7HuDA==","length":246408,"stub":true},"geddy-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-SOwRi/7xK1sr13KeFD5gfA==","length":246406,"stub":true},"geddy-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-MC2UDDdWNjP8Sks+pnUitQ==","length":246360,"stub":true},"geddy-0.2.11.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-h0na2d/TQj7CtqcaVdmGTw==","length":81920,"stub":true},"geddy-0.2.10.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-tib4KJAwm0AHpSIvxlDUxQ==","length":81920,"stub":true},"geddy-0.2.9.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-TyLpurlizgCicSRjjYAIfQ==","length":81920,"stub":true},"geddy-0.2.8.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-P283GR8Pvoi0VnbveY155w==","length":81920,"stub":true},"geddy-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-jWRJbP8GzE69WFe8OL+MMQ==","length":81920,"stub":true},"geddy-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-bUOFqWOLysucZ0JK+jsE7w==","length":81920,"stub":true},"geddy-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-pIR8La1dagdLBjKTJd7bzg==","length":81920,"stub":true},"geddy-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-pPeq/ZhhIysEQkvkfKSUUg==","length":81920,"stub":true},"geddy-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-1KpzaOyE47KOYHZO5Z3pQQ==","length":81920,"stub":true},"geddy-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-lESg/HEHyt/4HDNnUo1ycg==","length":81920,"stub":true},"geddy-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-xa8B0donkfgeuCwXQ+papw==","length":81920,"stub":true},"geddy-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-BbPQu1aW7H8rOwqNf/HnZg==","length":71680,"stub":true},"geddy-0.1.3-0.4-sunos-5.11.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-deqNdBWLzcn4U3GCtvQflQ==","length":167716,"stub":true},"geddy-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-nOBm2MRft/eXTreVMn+9eA==","length":95715,"stub":true},"geddy-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-LMUfKXfoRq5B/+GtWxkRAg==","length":95943,"stub":true}},"_etag":"\"7YYNYHZVWVE7JRI8U9HRXMATM\""}